/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var dryCool = ee.ImageCollection("projects/servir-mekong/usgs_sr_composites/drycool"),
    dryHot = ee.ImageCollection("projects/servir-mekong/usgs_sr_composites/dryhot"),
    rainy = ee.ImageCollection("projects/servir-mekong/usgs_sr_composites/rainy");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// define a study area
var sa = ee.FeatureCollection("projects/servir-mekong/CambodiaFireEmissions/Forest_Fire_Study_Area");
Map.addLayer(sa, {}, 'study area');

// choose classifier 
var classifier = ee.Classifier.randomForest;

// choose classifier parameters
var classifierParameters = {numberOfTrees:500};

// choose classifier output mode: CLASSIFICATION, REGRESSION, PROBABILITY
var mode = 'CLASSIFICATION';

// choose projection4
var crs = 'EPSG:4326';

// choose resolution
var scale = 30;

// choose export name
var exportName = 'Forest_NonForest';

// set the sample size
var sampleSize = 10000;

// choose the predictor bands
var predicBands = ['ndvi', 'ndii', 'nbr', 'ndwi2']

///////////////////////////////////////////////////////////////////////////////////////////
// predict forest change (loss only) prior to the year 2000
// create a change model between the years 2000 and 2017
// apply that model to all years prior to 2000
///////////////////////////////////////////////////////////////////////////////////////////
// join collections to a single collection
var mergedCollections = dryCool;//.merge(dryHot).merge(rainy);
print('merged collections', mergedCollections);

// filter the collections to get only the medoid images and remove thermal bands
var medoidCollections = mergedCollections.filter(ee.Filter.stringContains({leftField: 'compositingMethod', rightValue: 'Medoid'}))
                        .select(0,1,2,3,4,5);
print('medoidCollections', medoidCollections);

// function to add normalized difference to collection
function normalizedDifference(img){
  img = img.addBands(img.normalizedDifference(['nir', 'red']).rename('ndvi'));
  img = img.addBands(img.normalizedDifference(['nir', 'swir2']).rename('nbr'));
  img = img.addBands(img.normalizedDifference(['green', 'swir1']).rename('ndii'));
  img = img.addBands(img.normalizedDifference(['nir', 'swir2']).rename('ndwi2'));
  return img;
}

var medoidIndex = medoidCollections.map(normalizedDifference);
print('medoidIndex', medoidIndex);

// get a list of years
var years = ee.List.sequence(2001, 2017, 1);

// use Hansen et al 2017 as the reference data - filter for loss year eqauls 2001
var changeReferenceData = ee.Image('UMD/hansen/global_forest_change_2017_v1_5').select(3);
changeReferenceData = changeReferenceData.eq(1).clip(sa);
print('changeReferenceData', changeReferenceData);
Map.addLayer(changeReferenceData, {min:0, max:1}, 'change reference data');

// function to get pairwise differences
var samplePairwiseDifferences = years.map(function(year){
  var lossYear = ee.Number(year).subtract(2000);
  var refData = ee.Image('UMD/hansen/global_forest_change_2017_v1_5').select(3).eq(ee.Number(lossYear));
  var priorYear = ee.Number(year).subtract(1);
  var year1 = medoidIndex.filter(ee.Filter.equals({leftField: 'endyear', rightValue: ee.Number(year)})).select(6,7,8,9).first();
  var year2 = medoidIndex.filter(ee.Filter.equals({leftField: 'endyear', rightValue: ee.Number(priorYear)})).select(6,7,8,9).first();
  var diff = ee.Image(year1).subtract(ee.Image(year2));
  var sampleImage = refData.addBands(diff);
  var sample = sampleImage.sample({region: sa, scale: 30, numPixels: sampleSize});
  //sample = sample.flatten();
  return sample;
});
print('samplePairwiseDifferences', samplePairwiseDifferences);

// convert output to a feature collection, flatten, and add a random value column
// so that the sample can be balanced
var spdFC = ee.FeatureCollection(samplePairwiseDifferences).flatten();
spdFC = spdFC.randomColumn('rand', 456768);
print('spdFC', spdFC.limit(5));
spdFC = spdFC.sort('rand');

var change = spdFC.filter(ee.Filter.gte('lossyear', 1));
var noChange = spdFC.filter(ee.Filter.eq('lossyear', 0)).limit(change.size());
var changeNoChange = change.merge(noChange);
print(change.size());

// get the model input properties
var changeInputProperties = samplePairwiseDifferences.get(0);
changeInputProperties = ee.FeatureCollection(changeInputProperties).first()
                        .propertyNames().remove('lossyear').remove('system:index');
print('changeInputProperties', changeInputProperties);

// create the random forest classifier  
var changeModel = classifier(classifierParameters).setOutputMode(mode).train({
  features: changeNoChange,
  classProperty: 'lossyear',
  inputProperties: changeInputProperties, 
  subsampling: 1,
  subsamplingSeed: 0});
print('changeModel', changeModel);

// get confusion matrix
var changeConfusionMatrix = changeModel.confusionMatrix();
print('changeConfusionMatrix', changeConfusionMatrix);

var applyYears = ee.List.sequence(1986, 2000, 1);
print('applyYears', applyYears);

// apply the model
var applyModel = applyYears.map(function(year){
  var nextYear = ee.Number(year).add(1);
  var img1 = medoidIndex.filter(ee.Filter.calendarRange(year, year, 'year')).select(predicBands).first();
  var img2 = medoidIndex.filter(ee.Filter.calendarRange(nextYear, nextYear, 'year')).select(predicBands).first();
  var diff = img1.subtract(img2);
  var predict = diff.classify(changeModel); 
  return predict;
});
print('apply model', applyModel);
applyModel = ee.ImageCollection(applyModel);
print('apply model', applyModel);
Map.addLayer(applyModel.first().clip(sa), {min:0, max:1}, 'change');


///////////////////////////////////////////////////////////////////////////////////////////
// model forest/non-forest
// create a forest/non-forest model for the year 2000
// apply that model to all years after 2000
///////////////////////////////////////////////////////////////////////////////////////////

var predictors = ee.ImageCollection("projects/servir-mekong/CambodiaFireEmissions/forest-mapping-ls-ts");
predictors = predictors.select([0,1,2,3,4,5]);
print(predictors);

// set a threshold for forest cover
var covThresh = 20;

// get the Hansen modeled tree cover in the year 2000 as the reference data
var referenceData = ee.Image('UMD/hansen/global_forest_change_2017_v1_5').select(0);
referenceData = referenceData.gt(covThresh).clip(sa);
print('referenceData', referenceData);

// get landsat data from the year 2000 to use as explanatory variables in a random forest model
var xVars = predictors.filterMetadata('system:time_start', 'equals', 959817600000);
// convert it from an image collection to an image
xVars = xVars.median();
print('xVars', xVars);

// create the composite image to be sampled
var sampleImage = referenceData.addBands(xVars);

// Sample the training image to get the training data
var trainingData = sampleImage.sample({
  region: sa, 
  scale: 30, 
  numPixels: sampleSize
});
//print('training data', trainingData.limit(5));

// set the model input properties
var inputProperties = ee.Feature(trainingData.first()).propertyNames();
inputProperties = inputProperties.remove('system:index').remove('treecover2000');
print('inputProperties', inputProperties);

// get column name of reference field as a string
var responseField = 'treecover2000';
  
// create the random forest classifier  
var model = classifier(classifierParameters).setOutputMode(mode).train({
  features: trainingData,
  classProperty: responseField,
  inputProperties: inputProperties, 
  subsampling: 1,
  subsamplingSeed: 0});
print('model', model);

// get confusion matrix
var confusionMatrix = model.confusionMatrix();
print('confusionMatrix', confusionMatrix);
  
// map the classification function across each image in a collection 
var test = predictors.map(function(img){return classificationWrapper(img,model)});
print('test:', test);

// export the classified result
//Export.image.toDrive({image: test[1], description: exportName, region: sa, scale: scale, crs: crs, maxPixels: 1e13});

// add the classified result to the map
Map.addLayer(test.select(0), {min:0, max:1}, 'forest');

///////////////////////////////////////////////////////////////////////////////////////////////
// classification 
///////////////////////////////////////////////////////////////////////////////////////////////
function classificationWrapper(image, model){
  image = ee.Image(image);

  // apply the model to each image in the collection
  var applyModel = image.classify(model);
  
  return applyModel;
}






