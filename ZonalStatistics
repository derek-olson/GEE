/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var sa = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-114.1259765625, 39.605688178320804],
          [-114.14794921875, 36.94989178681327],
          [-110.32470703125, 36.89719446989036],
          [-110.54443359375, 39.639537564366684]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Set up the data
var climate = climPCA.clip(sa).select([0]).multiply(10000).int16();
var topo = topoAll.clip(sa).select([0,1,4,5,6]);
var landsat = LCMS.normalizedDifference(['nir','red']).multiply(10000).int16();

//Create composite
var composite = climate.addBands(topo).addBands(landsat);
//print(composite);

//Add the composite image to the map
//Map.addLayer(composite, {}, 'composite');

//Load reference data
var ref = ee.FeatureCollection('ft:1UuFquverkIKyJf09aDxGdFU9Y4V3jVIkLhwZ2J-W');

//Add refereence data to the map
//Map.addLayer(ref, {}, 'referenceData');

//Create segments
var segments = ee.Algorithms.Image.Segmentation.GMeans({
  image: composite, 
  numIterations: 10, 
  pValue: 50, 
  neighborhoodSize: 0, 
  gridSize: null,
  uniqueLabels: true
});

//Add segments to map
//Map.addLayer(segments, {}, 'segments');

//Calculate zonal statistics - does this need to be mapped????
var zstats = composite.reduceRegions({
  reducer: ee.Reducer.mean().group({groupField:0 , groupName:'zstatfid'}).combine({
    reducer2: ee.Reducer.stdDev().group({groupField:0 , groupName:'zstatfid'}),
    sharedInputs: true}),
  geometry: segments.geometry(),
  scale: 30,
  maxPixels: 1e8
});

// Print the resultant Dictionary.
//print(zstats);

//Sample the training image at 1000 points to get the training & testing data
var trainingTesting = trainingImage.sample({
  region: l5filtered.first().geometry(), 
  scale: 30, 
  numPixels: 1000
});

//Randomly split the data into 60% for training, and 40% for testing
trainingTesting = trainingTesting.randomColumn('random',484789);
var training = trainingTesting
  .filter(ee.Filter.lt('random', 0.6));
var testing = trainingTesting
  .filter(ee.Filter.gte('random', 0.6));

//Create randomForest classifier  
var rf = ee.Classifier.randomForest({
  numberOfTrees: 1000,
  variablesPerSplit: 0,
  minLeafPopulation: 1, 
  bagFraction: 0, 
  outOfBagMode: false,
  seed: 0
  })
  .setOutputMode('CLASSIFICATION')
  .train({
    features: ref,
    classProperty:'levelx',
    inputProperties: composite, 
    subsampling: 1,
    subsamplingSeed: 0
  })
  .confusionMatrix();
  
var prediction = composite.classify(rf, 'randomForestClassificatiion');