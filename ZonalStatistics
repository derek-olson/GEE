/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var sa = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-114.1259765625, 39.605688178320804],
          [-114.14794921875, 36.94989178681327],
          [-110.32470703125, 36.89719446989036],
          [-110.54443359375, 39.639537564366684]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Get NAIP 
var naipYear = 2015
var naipFactor = 30
var crs = "EPSG:26912"

var naip = ee.ImageCollection('USDA/NAIP/DOQQ')
  .filterDate(ee.Date.fromYMD(naipYear,1,1), ee.Date.fromYMD(naipYear,12,31))
  .filterBounds(sa);
naip = naip.reduceResolution(ee.Reducer.mean(),true,1024);
var naip_proj = ee.Image(naip.first()).projection();
var naip_mosaic = naip.mosaic().reproject(naip_proj);

//Get topographic derivatives
var topo = addNEDTopography();
topo = topo.resample('bicubic');

// Function to add USGS 1/3 arc second topography and derive slope, aspect,
// and hillshade
function addNEDTopography(){
  // Import NED elevation data
  var elevation = ee.Image('USGS/NED');
  // Calculate slope and aspect
  var topo = ee.Algorithms.Terrain(elevation);
  // Add 8-direction aspect
  var aspect = topo.select('aspect');
  aspect = aspect.multiply(Math.PI).divide(180)
  var aspectSin = aspect.sin()
  var aspectCos = aspect.cos()
  var aspect_8 = (aspect.multiply(8).divide(360)).add(1).floor().uint8().rename('aspect_8');
  // Add 3 equally-spaced sun azimuth hillshades
  var hill_1 = ee.Terrain.hillshade(elevation,30).rename('hill_1');
  var hill_2 = ee.Terrain.hillshade(elevation,150).rename('hill_2');
  var hill_3 = ee.Terrain.hillshade(elevation,270).rename('hill_3');
  // Add topography bands to image
  topo = topo.select('elevation','slope')
    .addBands(aspectSin).addBands(aspectCos)
    .addBands(aspect_8).addBands(hill_1).addBands(hill_2).addBands(hill_3);
  topo = topo.int16();
  return topo;
};

//Get datasets 
var climate = climPCA.clip(sa).select([0]).multiply(10000).int16();
var topo = topoAll.clip(sa).select([0,1,4,5,6]);
var landsat = LCMS.normalizedDifference(['nir','red']).multiply(10000).int16();

//Create composite
var composite = climate.addBands(topo).addBands(landsat);
//print(composite);

//Add the composite image to the map
//Map.addLayer(composite, {}, 'composite');

//Load reference data
var ref = ee.FeatureCollection('ft:1UuFquverkIKyJf09aDxGdFU9Y4V3jVIkLhwZ2J-W');

//Add refereence data to the map
//Map.addLayer(ref, {}, 'referenceData');

//Create segments
var segments = ee.Algorithms.Image.Segmentation.GMeans({
  image: composite, 
  numIterations: 10, 
  pValue: 50, 
  neighborhoodSize: 0, 
  gridSize: null,
  uniqueLabels: true
});

//Add segments to map
//Map.addLayer(segments, {}, 'segments');

//Calculate zonal statistics
var zstats = nlDiff.reduceRegions({
  reducer: ee.Reducer.mean().group({
    groupField: 1,
    groupName: 'code',
  }),
  geometry: region.geometry(),
  scale: 30,
  maxPixels: 1e8
});

// Print the resultant Dictionary.
//print(zstats);

//Sample the training image at 1000 points to get the training & testing data
var trainingTesting = trainingImage.sample({
  region: l5filtered.first().geometry(), 
  scale: 30, 
  numPixels: 1000
});

//Randomly split the data into 60% for training, and 40% for testing
trainingTesting = trainingTesting.randomColumn('random',484789);
var training = trainingTesting
  .filter(ee.Filter.lt('random', 0.6));
var testing = trainingTesting
  .filter(ee.Filter.gte('random', 0.6));

//Create randomForest classifier  
var rf = ee.Classifier.randomForest({
  numberOfTrees: 1000,
  variablesPerSplit: 0,
  minLeafPopulation: 1, 
  bagFraction: 0, 
  outOfBagMode: false,
  seed: 0
  })
  .setOutputMode('CLASSIFICATION')
  .train({
    features: ref,
    classProperty:'levelx',
    inputProperties: composite, 
    subsampling: 1,
    subsamplingSeed: 0
  })
  .confusionMatrix();
  
var prediction = composite.classify(rf, 'randomForestClassificatiion');