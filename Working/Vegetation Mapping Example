/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var topoAll = ee.Image("users/thinkbetween/Dixie_topo"),
    harmonics_full = ee.Image("users/thinkbetween/Dixie_Harmonics"),
    landsatComposite = ee.Image("users/thinkbetween/Dixie_Composite"),
    climPCA = ee.Image("users/thinkbetween/Dixie_Climate_PCA");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Add the mapping boundary
var bound = ee.FeatureCollection('ft:166J6dwWluxbb3g15e3k2hhiRvUkyd6lXUO4NPzdV');
Map.addLayer(bound, {}, 'boundary');

//Set up the data
var climate = climPCA.clip(bound).select([0]).multiply(10000).int16();
var topo = topoAll.clip(bound);
var landsat = landsatComposite.clip(bound).select([0,1,2,3,4,5,6,11,12,13]);
var harmonics = harmonics_full.clip(bound);

//Create composite
var composite = topo.addBands(landsat).addBands(harmonics);
print(composite);

//Add the composite image to the map
Map.addLayer(composite, {}, 'composite', false);

//Load reference data
var ref = ee.FeatureCollection('ft:1icfdEpQQ6rSYk2G63bAkueANuiX6fmQ_7OqKTaqD');

//Add refereence data to the map
Map.addLayer(ref, {}, 'referenceData', false);

//Create segments
var segments = ee.Algorithms.Image.Segmentation.GMeans({
  image: composite, 
  numIterations: 10, 
  pValue: 5, 
  neighborhoodSize: 100, 
  gridSize: null,
  uniqueLabels: true
});
print(segments)
//Add segments to map
Map.addLayer(segments.randomVisualizer(), {}, 'segments');
/*
//Calculate zonal statistics - does this need to be mapped????
var zstats = composite.reduceRegions({
  reducer: ee.Reducer.mean().group({groupField:0 , groupName:'zstatfid'}).combine({
    reducer2: ee.Reducer.stdDev().group({groupField:0 , groupName:'zstatfid'}),
    sharedInputs: true}),
  geometry: segments.geometry(),
  scale: 30,
  maxPixels: 1e8
});

// Print the resultant Dictionary.
//print(zstats);

//Sample the training image at 1000 points to get the training & testing data
var trainingTesting = trainingImage.sample({
  region: l5filtered.first().geometry(), 
  scale: 30, 
  numPixels: 1000
});

//Randomly split the data into 60% for training, and 40% for testing
trainingTesting = trainingTesting.randomColumn('random',484789);
var training = trainingTesting
  .filter(ee.Filter.lt('random', 0.6));
var testing = trainingTesting
  .filter(ee.Filter.gte('random', 0.6));

//Create randomForest classifier  
var rf = ee.Classifier.randomForest({
  numberOfTrees: 1000,
  variablesPerSplit: 0,
  minLeafPopulation: 1, 
  bagFraction: 0, 
  outOfBagMode: false,
  seed: 0
  })
  .setOutputMode('CLASSIFICATION')
  .train({
    features: ref,
    classProperty:'levelx',
    inputProperties: composite, 
    subsampling: 1,
    subsamplingSeed: 0
  })
  .confusionMatrix();
  
var prediction = composite.classify(rf, 'randomForestClassificatiion');*/