/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var temperature = ee.Image("users/thinkbetween/CT_BT_SH_Temp"),
    precipitation = ee.Image("users/thinkbetween/CT_BT_SH_Precip");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var bound = precipitation.geometry();
var exportPCName = 'BT_CT_SH_climatePCA';
var scale = 30;
var crs = 'EPSG:26912'
////////////////////////////////////////////////////////////////////////////////
// Function to export a provided image to an Google Drive
function exportToDriveWrapper(imageForExport,fileName,roi,scale,crs){
  //Make sure image is clipped to roi in case it's a multi-part polygon
  fileName = fileName.replace(/\s+/g,'-');//Get rid of any spaces
  
  Export.image.toDrive({
    image: imageForExport,
    description: fileName,
    region: roi,
    scale: scale,
    crs: crs,
    maxPixels: 1e13
  });
}

////////////////////////////////////////////////////////////////////////////////
// Principal components

// Load image, select the bands of interest.
var image = precipitation.addBands(temperature)
print('image:', image)
// Display the input imagery and the region in which to do the PCA.
var region = bound

// Get some information about the input to be used later.
var scale = image.projection().nominalScale();
var bandNames = image.bandNames();

// Mean center the data to enable a faster covariance reducer
// and an SD stretch of the principal components.
var meanDict = image.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: region,
    scale: scale,
    maxPixels: 1e9
});
var means = ee.Image.constant(meanDict.values(bandNames));
var centered = image.subtract(means);

// This helper function returns a list of new band names.
var getNewBandNames = function(prefix) {
  var seq = ee.List.sequence(1, bandNames.length());
  return seq.map(function(b) {
    return ee.String(prefix).cat(ee.Number(b).int());
  });
};

// This function accepts mean centered imagery, a scale and
// a region in which to perform the analysis.  It returns the
// Principal Components (PC) in the region as a new image.
var getPrincipalComponents = function(centered, scale, region) {
  // Collapse the bands of the image into a 1D array per pixel.
  var arrays = centered.toArray();

  // Compute the covariance of the bands within the region.
  var covar = arrays.reduceRegion({
    reducer: ee.Reducer.centeredCovariance(),
    geometry: region,
    scale: scale,
    maxPixels: 1e9
  });

  // Get the 'array' covariance result and cast to an array.
  // This represents the band-to-band covariance within the region.
  var covarArray = ee.Array(covar.get('array'));

  // Perform an eigen analysis and slice apart the values and vectors.
  var eigens = covarArray.eigen();

  // This is a P-length vector of Eigenvalues.
  var eigenValues = eigens.slice(1, 0, 1);
  // This is a PxP matrix with eigenvectors in rows.
  var eigenVectors = eigens.slice(1, 1);

  // Convert the array image to 2D arrays for matrix computations.
  var arrayImage = arrays.toArray(1);

  // Left multiply the image array by the matrix of eigenvectors.
  var principalComponents = ee.Image(eigenVectors).matrixMultiply(arrayImage);

  // Turn the square roots of the Eigenvalues into a P-band image.
  var sdImage = ee.Image(eigenValues.sqrt())
    .arrayProject([0]).arrayFlatten([getNewBandNames('sd')]);

  // Turn the PCs into a P-band image, normalized by SD.
  return principalComponents
    // Throw out an an unneeded dimension, [[]] -> [].
    .arrayProject([0])
    // Make the one band array image a multi-band image, [] -> image.
    .arrayFlatten([getNewBandNames('pc')])
    // Normalize the PCs by their SDs.
    .divide(sdImage);
};

// Get the PCs at the specified scale and in the specified region
var pcImage = getPrincipalComponents(centered, scale, region);
print('pcImage:', pcImage)
// Plot each PC as a new layer
for (var i = 0; i < bandNames.length().getInfo(); i++) {
  var band = pcImage.bandNames().get(i).getInfo();
  Map.addLayer(pcImage.select([band]), {min: -2, max: 2}, band,false);
}

//Function to set nodata
function setNull(img, nodataValue){
  var m = img.mask()
  img = img.mask(ee.Image(1))
  img = img.where(m.not(),nodataValue)
  return img
}
print('pcImage:', pcImage);
var outImg = pcImage.multiply(1000).int16().clip(region);
print(outImg);
setNull(outImg, -32768);

exportToDriveWrapper(outImg,exportPCName,region,scale,crs);