/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var srtm = ee.Image("users/thinkbetween/srtm30v21_NA_LCC_Final");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var bound = ee.FeatureCollection('ft:1a8hq6X4cv_OMkx4QKYYsWpbPR_to6sDsJRVESCQW', 'geometry');
Map.addLayer(bound, {}, 'bound');

//////////////////////////////////////////////////////////////////////////
//Downscale Climate Data https://www.wsl.ch/staff/niklaus.zimmermann/biophys.html#Meth
//////////////////////////////////////////////////////////////////////////
var scale = 30;
var crs = 'EPSG:26912';
var ned = ee.Image('USGS/NED');
var yearStart = 1998
var yearEnd = 2017
var exportTempName = 'minTempDownscale'
var exportPrecipName = 'precipDownscale'
var exportPCName = 'climatePrincipalComponents'
var kern = ee.Kernel.square(6.5, 'pixels', false);

// Create a list of weights for a 7x7 kernel.
/*var list = [ 0.25, 0.5, 0.75, 1, 0.75, 0.5, 0.25];
// The center of the kernel is zero.
var centerList = [0.25, 0.5, 0.75, 0, 0.75, 0.5, 0.25];
// Assemble a list of lists: the 7x7 kernel weights as a 2-D matrix.
var lists = [list, list, list, centerList, list, list, list];
// Create the kernel from the weights.
var kern = ee.Kernel.fixed(7, 7, lists, -3, -3, false);
print(kern); */

//////////////////////////////////////////////
//exportToDriveWrapper(out,exportTempName,region,sa,30,crs);
//exportToDriveWrapper(predicted,exportPrecipName,sa,region,30,crs);

var prcp = ee.ImageCollection('NASA/ORNL/DAYMET_V3')
          .filterDate(ee.Date.fromYMD(yearStart,1,1),ee.Date.fromYMD(yearEnd,12,31))
          .select(1);
var minTemp = ee.ImageCollection('NASA/ORNL/DAYMET_V3')
          .filterDate(ee.Date.fromYMD(yearStart,1,1),ee.Date.fromYMD(yearEnd,12,31))
          .select(5);

//Get the DAYMET projection
var daymetProj = ee.Image(prcp.first()).projection();

//Annualize the temp and precip data
var tempIn = annualizeCollection(minTemp, ee.Reducer.mean());
tempIn = tempIn.mean().reproject(daymetProj);
print('tempIn:', tempIn);
var prcpIn = annualizeCollection(prcp, ee.Reducer.sum());
prcpIn = prcpIn.mean().reproject(daymetProj);
print('prcpIn:', prcpIn);
//tempIn = tempIn.resample('bilinear');
//tempIn = tempIn.reproject(crs, null, scale)
//print('tempInReproj:', tempIn);
//prcpIn = prcpIn.resample('bilinear')
//prcpIn = prcpIn.reproject(crs, null, scale)
//print('prcpInReproj:', prcpIn);

srtm = srtm.reproject(daymetProj);
print('srtm:', srtm);
var constant = ee.Image(1).reproject(daymetProj);
print('constant:', constant)
ned = ned.resample('bilinear')
ned = ned.reproject(daymetProj, null, scale)
print('ned:', ned)

var predictors = constant.addBands(ned).addBands(srtm).addBands(tempIn).addBands(prcpIn)
print('predictors:', predictors)

var nArrays = predictors.neighborhoodToArray(kern);
print('nArrays:', nArrays)

var nBands = predictors.neighborhoodToBands(kern)
print('nBands:', nBands)

// Compute ordinary least squares regression coefficients.
var linearRegression = ee.ImageCollection(predictors).reduce(
  ee.Reducer.linearRegression({
    numX: 3,
    numY: 2
}));

print('linearRegression:', linearRegression);

//var inds = ned.addBands(srtm).resample('bilinear').reproject(crs, null, scale);
//print('inds:', inds);

//////////////////////////////////////////////////////////////////////////////////////
//Function to annualize
//////////////////////////////////////////////////////////////////////////////////////
function annualizeCollection(x, reducer){
  x = x.sort('system:time_start');
  var startDate = ee.Date(ee.Image(x.first()).get('system:time_start'));
  var endDate = ee.Date(ee.Image(x.sort('system:time_start', false).first())
    .get('system:time_start'));
  var years = ee.List.sequence(startDate.get('year'), endDate.get('year'));
  
  return ee.ImageCollection.fromImages(years.map(function(yr){
    return x.filterDate(ee.Date.fromYMD(yr,1,1),ee.Date.fromYMD(yr,12,31))
      .reduce(reducer);
  }));
}
//////////////////////////////////////////////////////////////////////////////////////





































