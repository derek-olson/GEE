/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var srtm = ee.Image("users/thinkbetween/srtm30v21_NA_LCC_Final"),
    sa = /* color: #ffc82d */ee.Geometry.Polygon(
        [[[-106.00554365755374, 39.71899686212848],
          [-105.90117354036624, 39.70737637882213],
          [-105.89018721224124, 39.780236123754705],
          [-106.01927656771, 39.780236123754705]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var bound = sa//ee.FeatureCollection('ft:1a8hq6X4cv_OMkx4QKYYsWpbPR_to6sDsJRVESCQW', 'geometry');
//Map.addLayer(bound, {}, 'bound');

//////////////////////////////////////////////////////////////////////////
//Downscale Climate Data https://www.wsl.ch/staff/niklaus.zimmermann/biophys.html#Meth
//////////////////////////////////////////////////////////////////////////
var scale = 30;
var crs = 'EPSG:26912';
var ned = ee.Image('USGS/NED');
var yearStart = 1998
var yearEnd = 2017
var exportTempName = 'minTempDownscale'
var exportPrecipName = 'precipDownscale'
var exportPCName = 'climatePrincipalComponents'
var kernalSize = 6.5
var kern = ee.Kernel.square(kernalSize, 'pixels', false);

// Create a list of weights for a 7x7 kernel.
/*var list = [ 0.25, 0.5, 0.75, 1, 0.75, 0.5, 0.25];
// The center of the kernel is zero.
var centerList = [0.25, 0.5, 0.75, 0, 0.75, 0.5, 0.25];
// Assemble a list of lists: the 7x7 kernel weights as a 2-D matrix.
var lists = [list, list, list, centerList, list, list, list];
// Create the kernel from the weights.
var kern = ee.Kernel.fixed(7, 7, lists, -3, -3, false);
print(kern); */

//////////////////////////////////////////////
//exportToDriveWrapper(out,exportTempName,region,sa,30,crs);
//exportToDriveWrapper(predicted,exportPrecipName,sa,region,30,crs);

var prcp = ee.ImageCollection('NASA/ORNL/DAYMET_V3')
          .filterDate(ee.Date.fromYMD(yearStart,1,1),ee.Date.fromYMD(yearEnd,12,31))
          .select(1)
var minTemp = ee.ImageCollection('NASA/ORNL/DAYMET_V3')
          .filterDate(ee.Date.fromYMD(yearStart,1,1),ee.Date.fromYMD(yearEnd,12,31))
          .select(5);


var daymetProj = ee.Image(prcp.first()).projection()
var tempIn = annualizeCollection(minTemp, ee.Reducer.mean())
tempIn = tempIn.mean().reproject(daymetProj)
print('tempIn:', tempIn);
var prcpIn = annualizeCollection(prcp, ee.Reducer.sum())
prcpIn = prcpIn.mean().reproject(daymetProj);
print('prcpIn:', prcpIn)

//Map.addLayer(tempIn,{'min':-10,'max':2},'min Temp', false);
//Map.addLayer(prcpIn,{'min':0,'max':100},'precip', false);
//Map.addLayer(ned, {} , 'NED', false);

tempIn = tempIn.resample('bilinear')
tempIn = tempIn.reproject(crs, null, scale)
print('tempInReproj:', tempIn);
prcpIn = prcpIn.resample('bilinear')
prcpIn = prcpIn.reproject(crs, null, scale)
print('prcpInReproj:', prcpIn)

var inds = ned.addBands(srtm).resample('bilinear').reproject(crs, null, scale);
print('inds:', inds)

//////////////////////////////////////////////////////
function downscaler(independents, dependent, sa,kernel,scale,crs){ 
 
  //Get info about how many independents (number of provided independent bands + 1 for the constant band)
  var nInds = independents.bandNames().length().getInfo()+1;
  
  //Total number of bands in the stack that goes into the linear regression model
  var nTotal = nInds+1

  //Set up the stack for the model
  //Constant band plus the independents
  var independentStack =ee.Image(1).addBands(independents)
  
  //Add the dependent to it
  var pred = independentStack.addBands(dependent);
  
  //Get the bandnames for later use
  var predBandNames = pred.bandNames()
  
  //Convert neighborhood to a stack of bands (nbands = nbandsPred * kernalDiameter^2)
  pred = pred.neighborhoodToBands(kernel).float();
  //Get client-side number of bands of big big stack
  var stackBands = pred.bandNames().length().getInfo();
  
  //Find number of images needed in collection for model
  var imageN = stackBands/nTotal;
  
  var predBands = pred.bandNames();
  var coords = [];
  ee.List.sequence(-6,6).getInfo().map(function(i1){
    ee.List.sequence(-6,6).getInfo().map(function(i2){
      coords.push('_'+i1.toString()+'_'+i2.toString());
    });
  });
 
  
  //Reshape ind/pred stack
  var stackC = coords.map(function(coord){
    var i = pred.select('.*'+coord).rename(predBandNames);
    return i;
  });

  //Convert to collection
  stackC = ee.ImageCollection(stackC);

  //Fit model
  var fit = stackC.reduce(ee.Reducer.linearRegression(nInds, 1));

  //Pull off coefficients
  fit = fit.select([0]).arrayProject([0]);
  fit = fit.arrayFlatten([independentStack.bandNames()]);
  //Map.addLayer(fit,{},'model',false);
  
  //Apply model
  var predicted = independentStack.multiply(fit).reduce(ee.Reducer.sum());
  Map.addLayer(predicted,{},'oversampled');
  // return predicted
  // //exportToDriveWrapper(predicted,exportTempName,sa,scale,crs);
  // //exportToDriveWrapper(predicted,exportPrecipName,sa,scale,crs);
}

//Get precip and temp for PCA
var precipitation = downscaler(inds, prcpIn, bound, kern, scale, crs);
// precipitation = precipitation.reproject(crs, null, scale).clip(bound)
// print('precipitation:', precipitation);
// Map.addLayer(precipitation, {}, 'precipitation')
// var temperature = downscaler(inds, tempIn, bound, kern, scale, crs);
// temperature = temperature.reproject(crs, null, scale).clip(bound)
// print('temperature:', temperature);
// Map.addLayer(temperature, {}, 'temperature')
//////////////////////////////////////////////////////////////////////////////////////
//Function to annualize
//////////////////////////////////////////////////////////////////////////////////////
function annualizeCollection(x, reducer){
  x = x.sort('system:time_start');
  var startDate = ee.Date(ee.Image(x.first()).get('system:time_start'));
  var endDate = ee.Date(ee.Image(x.sort('system:time_start', false).first())
    .get('system:time_start'));
  var years = ee.List.sequence(startDate.get('year'), endDate.get('year'));
  
  return ee.ImageCollection.fromImages(years.map(function(yr){
    return x.filterDate(ee.Date.fromYMD(yr,1,1),ee.Date.fromYMD(yr,12,31))
      .reduce(reducer);
  }));
}

// ////////////////////////////////////////////////////////////////////////////////
// // Function to export a provided image to an Google Drive
// function exportToDriveWrapper(imageForExport,fileName,roi,scale,crs){
//   //Make sure image is clipped to roi in case it's a multi-part polygon
//   fileName = fileName.replace(/\s+/g,'-');//Get rid of any spaces
  
//   Export.image.toDrive({
//     image: imageForExport,
//     description: fileName,
//     region: roi,
//     scale: scale,
//     crs: crs,
//     maxPixels: 1e13
//   });
// }

// ////////////////////////////////////////////////////////////////////////////////
// // Principal components

// // Load image, select the bands of interest.
// var image = precipitation.addBands(temperature)
// print('image:', image)
// // Display the input imagery and the region in which to do the PCA.
// var region = bound

// // Get some information about the input to be used later.
// var scale = image.projection().nominalScale();
// var bandNames = image.bandNames();

// // Mean center the data to enable a faster covariance reducer
// // and an SD stretch of the principal components.
// var meanDict = image.reduceRegion({
//     reducer: ee.Reducer.mean(),
//     geometry: region,
//     scale: scale,
//     maxPixels: 1e9
// });
// var means = ee.Image.constant(meanDict.values(bandNames));
// var centered = image.subtract(means);

// // This helper function returns a list of new band names.
// var getNewBandNames = function(prefix) {
//   var seq = ee.List.sequence(1, bandNames.length());
//   return seq.map(function(b) {
//     return ee.String(prefix).cat(ee.Number(b).int());
//   });
// };

// // This function accepts mean centered imagery, a scale and
// // a region in which to perform the analysis.  It returns the
// // Principal Components (PC) in the region as a new image.
// var getPrincipalComponents = function(centered, scale, region) {
//   // Collapse the bands of the image into a 1D array per pixel.
//   var arrays = centered.toArray();

//   // Compute the covariance of the bands within the region.
//   var covar = arrays.reduceRegion({
//     reducer: ee.Reducer.centeredCovariance(),
//     geometry: region,
//     scale: scale,
//     maxPixels: 1e9
//   });

//   // Get the 'array' covariance result and cast to an array.
//   // This represents the band-to-band covariance within the region.
//   var covarArray = ee.Array(covar.get('array'));

//   // Perform an eigen analysis and slice apart the values and vectors.
//   var eigens = covarArray.eigen();

//   // This is a P-length vector of Eigenvalues.
//   var eigenValues = eigens.slice(1, 0, 1);
//   // This is a PxP matrix with eigenvectors in rows.
//   var eigenVectors = eigens.slice(1, 1);

//   // Convert the array image to 2D arrays for matrix computations.
//   var arrayImage = arrays.toArray(1);

//   // Left multiply the image array by the matrix of eigenvectors.
//   var principalComponents = ee.Image(eigenVectors).matrixMultiply(arrayImage);

//   // Turn the square roots of the Eigenvalues into a P-band image.
//   var sdImage = ee.Image(eigenValues.sqrt())
//     .arrayProject([0]).arrayFlatten([getNewBandNames('sd')]);

//   // Turn the PCs into a P-band image, normalized by SD.
//   return principalComponents
//     // Throw out an an unneeded dimension, [[]] -> [].
//     .arrayProject([0])
//     // Make the one band array image a multi-band image, [] -> image.
//     .arrayFlatten([getNewBandNames('pc')])
//     // Normalize the PCs by their SDs.
//     .divide(sdImage);
// };

// // Get the PCs at the specified scale and in the specified region
// var pcImage = getPrincipalComponents(centered, scale, region);
// print('pcImage:', pcImage)
// // Plot each PC as a new layer
// for (var i = 0; i < bandNames.length().getInfo(); i++) {
//   var band = pcImage.bandNames().get(i).getInfo();
//   Map.addLayer(pcImage.select([band]), {min: -2, max: 2}, band,false);
// }

// //Function to set nodata
// function setNull(img, nodataValue){
//   var m = img.mask()
//   img = img.mask(ee.Image(1))
//   img = img.where(m.not(),nodataValue)
//   return img
// }
// print('pcImage:', pcImage);
// var outImg = pcImage.multiply(1000).int16().clip(region);
// print(outImg);
// setNull(outImg, -32768);

// exportToDriveWrapper(outImg,exportPCName,region,scale,crs);