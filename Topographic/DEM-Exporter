/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: d63000 */ee.Geometry.MultiPoint(),
    imageVisParam = {"opacity":1,"bands":["elevation"],"min":3000,"max":4000,"gamma":1};
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Script to download DEM without artifacts

var studyArea = ee.FeatureCollection('ft:14W_sIrTWXwNyCugjKP9CVr7rg-2I5yoSajyDUxVj', 'geometry');
Map.addLayer(studyArea)

var bounds = studyArea.geometry(10000)
Map.addLayer(bounds.bounds())

bounds = bounds.bounds().getInfo().coordinates[0]
print(bounds)

//Specify dem source
//Options include: USGS/GMTED2010, USGS/SRTMGL1_003, CGIAR/SRTM90_V4, and others 
var demName = 'USGS/NED';

var noDataValue = -9999;//Specify value for null data
var zone = 12;//Specify UTM zone
var resolution = 30;//Specify spatial resolutio in meters
var resampleMethod = 'bicubic';//Specify resampling method (bicubic generally works well for terrain data)

var exportName = 'DEMExport';//Give the exported .tif a descriptive name
//////////////////////////////////////////////////////////////
var regionJSON = bounds;


//Get data
var dem = ee.Image(demName);
dem = dem.clip(studyArea).resample(resampleMethod);
Map.addLayer(dem,{'min':3000,'max':4000},'DEM');

//Reset mask so exporting will not use 0 as no data
var m = dem.mask();
dem = dem.mask(ee.Image(1));
dem = dem.where(m.not(),noDataValue)

//Export reprojected as well as native projection
var info = dem.getInfo().bands[0]
Export.image(dem,exportName +'Proj',{'region':regionJSON,crs:'EPSG:5070','scale':resolution, maxPixels:10000000000000});
Export.image(dem,exportName +'Geog',{'region':regionJSON,crs:info.crs, crs_transform:JSON.stringify(info.crs_transform) });

//Convert to 8 bit
var demViz = dem.visualize({'min':3000,'max':4000});
Map.addLayer(demViz,{},'DEM-8-bit')
//Get URL for PNG 
var url =demViz.getThumbURL({'dimensions':1500,'region':regionJSON,'format':'png'})
print(url)