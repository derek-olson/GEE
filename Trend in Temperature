/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var averageMaxTemp = {"opacity":1,"bands":["tmax"],"min":-1.248250961303711,"max":33.600990295410156,"gamma":1},
    sa = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-120.234375, 36.31512514748051],
          [-116.279296875, 35.67514743608468],
          [-116.19140625, 39.095962936305476],
          [-120.146484375, 39.16414104768743]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var startDate = ee.Date.fromYMD(1980, 1, 1);
var endDate = ee.Date.fromYMD(2017, 12, 31);

var timeBand = function(image)
{
  var time = ee.Date(image.get('system:time_start'));
  var year = time.get('year');
  var proportion = time.getFraction('year');
  var yrProportion = ee.Image(year.add(proportion)).float();
  return image.addBands(yrProportion.select([0], ['year']));
};

var temp = ee.ImageCollection('NASA/ORNL/DAYMET_V3')
  .filterDate(startDate, endDate)
  .select(['tmax'])
  .map(timeBand);

//var maxTemp = temp.select(['tmax']).mean();
//Map.addLayer(maxTemp, averageMaxTemp, 'average max temp');

var linearFit = temp.select(['year', 'tmax']).reduce(ee.Reducer.linearFit());

Map.addLayer(linearFit, {min:-250 , max:250 , bands:['scale', 'offset', 'scale']},  'linearFit');

var actualPredicted = temp.map(function(img){
  var predicted = img.select(['year']).multiply(linearFit.select(['scale'])).add(linearFit.select(['offset'])).select([0], ['predictedMaxTemp']);
  var actual = img.select(['tmax']).select([0], ['actualMaxTemp']);
  return actual.addBands(predicted);
});

//Map.addLayer(actualPredicted, {min:-15, max:15, bands:['actualMaxTemp','predictedMaxTemp','predictedMaxTemp']}, 'actual vs predicted');

Export.image.toDrive(image: linearFit, description: 'maxTempLinearFit', region: sa, scale; 1000, crs: 'EPSG:26911', maxPixels: 1e13)