/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-123.08152831303084, 49.32562177604875],
          [-125.58641112553084, 48.4588604083028],
          [-125.19090331303084, 35.99640578803668],
          [-118.86277831303084, 32.06460543911741],
          [-114.60008300053084, 32.324923577084675],
          [-111.21629393803084, 31.241641002366578],
          [-108.66746581303084, 31.204060835977366],
          [-107.65672362553084, 31.204060835977366],
          [-107.65672362553084, 31.728819365051365],
          [-106.77781737553084, 31.616618943959345],
          [-105.06395018803084, 29.574123992840637],
          [-103.52586425053084, 28.652703550025073],
          [-102.55906737553084, 29.34454383034981],
          [-101.68016112553084, 29.497655020872138],
          [-100.62547362553084, 28.150179330158192],
          [-99.52684081303084, 26.58921286988846],
          [-97.81297362553084, 25.681828407549645],
          [-97.10984862553084, 25.840139553083713],
          [-96.58250487553084, 26.549908535555126],
          [-96.75828612553084, 27.372448267366448],
          [-96.05516112553084, 28.227645667784227],
          [-93.98973143803084, 29.114445329798194],
          [-92.58348143803084, 29.229559213928738],
          [-90.82566893803084, 28.845345360383156],
          [-89.59520018803084, 28.806845436900943],
          [-88.67234862553084, 28.99920249781729],
          [-88.62840331303084, 29.726888227781753],
          [-87.26609862553084, 29.99366641527786],
          [-85.64012206303084, 29.841309047550705],
          [-85.37645018803084, 29.34454383034981],
          [-84.58543456303084, 29.497655020872138],
          [-83.57469237553084, 29.152830967893085],
          [-82.91551268803084, 28.536948174121807],
          [-83.13523925053084, 27.956268343754214],
          [-82.73973143803084, 27.09893654822599],
          [-82.12449706303084, 25.998239145720976],
          [-81.86082518803084, 25.32485965460078],
          [-81.06980956303084, 24.847261187104415],
          [-79.83934081303084, 25.006667595975387],
          [-79.09227050053084, 25.879684320375127],
          [-79.18016112553084, 27.528438211323863],
          [-80.01512206303084, 28.845345360383156],
          [-80.10301268803084, 30.06975758549627],
          [-80.14695800053084, 31.39181210253444],
          [-78.87254393803084, 32.436260231377226],
          [-77.15867675053084, 34.235146322671575],
          [-75.75242675053084, 34.92259977482901],
          [-75.04930175053084, 36.42189948127991],
          [-74.91746581303084, 37.440582898204696],
          [-73.59910643803084, 39.16473559178546],
          [-71.27000487553084, 40.71453705496616],
          [-69.46824706303084, 41.01364439658642],
          [-68.67723143803084, 42.32662937156239],
          [-69.55613768803084, 43.165681936619514],
          [-68.19383300053084, 44.15123135901179],
          [-66.43602050053084, 44.68482257292207],
          [-66.83152831303084, 45.4298368761684],
          [-66.91941893803084, 46.680120561445165],
          [-67.93016112553084, 47.5770430121139],
          [-69.73191893803084, 47.69549046891942],
          [-71.62156737553084, 45.64530430320939],
          [-73.77488768803084, 45.460668487479076],
          [-75.40086425053084, 45.337240935699455],
          [-76.67527831303084, 44.591013264563735],
          [-78.87254393803084, 43.930102192189885],
          [-79.88328612553084, 43.453475556561266],
          [-81.64109862553084, 42.35911055168968],
          [-81.46531737553084, 44.62229988544391],
          [-82.47605956303084, 46.04326791805841],
          [-85.02488768803084, 47.30955418313535],
          [-88.89207518803084, 48.66244932894224],
          [-90.12254393803084, 48.72046712224983],
          [-93.19871581303084, 48.92300312315014],
          [-94.82469237553084, 49.411472112725214],
          [-95.83543456303084, 49.29697167841542],
          [-103.78953612553084, 49.210921393916095]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Wrapper for running harmonic regression across a moving window of years

//Module imports
var getImageLib = require('users/thinkbetween/default:getImagesLib_leafOff.js');
var dLib = require('users/USFS_GTAC/modules:changeDetectionLib.js');
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Define user parameters:

// 1. Specify study area: Study area
// Can specify a country, provide a fusion table  or asset table (must add 
// .geometry() after it), or draw a polygon and make studyArea = drawnPolygon
var studyArea = geometry;

// 2. Update the startJulian and endJulian variables to indicate your seasonal 
// constraints. This supports wrapping for tropics and southern hemisphere.
// startJulian: Starting Julian date 
// endJulian: Ending Julian date
var startJulian = 1;
var endJulian = 365; 

// 3. Specify start and end years for all analyses
// More than a 3 year span should be provided for time series methods to work 
// well. If using Fmask as the cloud/cloud shadow masking method, this does not 
// matter
var startYear = 2016;
var endYear = 2018;

// 4. Specify an annual buffer to include imagery from the same season 
// timeframe from the prior and following year. timeBuffer = 1 will result 
// in a 3 year moving window
var timebuffer = 1;


// 7. Choose Top of Atmospheric (TOA) or Surface Reflectance (SR) 
// Specify TOA or SR
// Current implementation does not support Fmask for TOA
var toaOrSR = 'SR';

// 8. Choose whether to include Landat 7
// Generally only included when data are limited
var includeSLCOffL7 = false;

//9. Whether to defringe L5
//Landsat 5 data has fringes on the edges that can introduce anomalies into 
//the analysis.  This method removes them, but is somewhat computationally expensive
var defringeL5 = true;

// 10. Choose cloud/cloud shadow masking method
// Choices are a series of booleans for cloudScore, TDOM, and elements of Fmask
//Fmask masking options will run fastest since they're precomputed
//CloudScore runs pretty quickly, but does look at the time series to find areas that 
//always have a high cloudScore to reduce comission errors- this takes some time
//and needs a longer time series (>5 years or so)
//TDOM also looks at the time series and will need a longer time series
var applyCloudScore = false;
var applyFmaskCloudMask = true;

var applyTDOM = false;
var applyFmaskCloudShadowMask = true;

var applyFmaskSnowMask = true;

// 11. Cloud and cloud shadow masking parameters.
// If cloudScoreTDOM is chosen
// cloudScoreThresh: If using the cloudScoreTDOMShift method-Threshold for cloud 
//    masking (lower number masks more clouds.  Between 10 and 30 generally 
//    works best)
var cloudScoreThresh = 20;

// Percentile of cloud score to pull from time series to represent a minimum for 
// the cloud score over time for a given pixel. Reduces comission errors over 
// cool bright surfaces. Generally between 5 and 10 works well. 0 generally is a
// bit noisy
var cloudScorePctl = 10; 

// zScoreThresh: Threshold for cloud shadow masking- lower number masks out 
//    less. Between -0.8 and -1.2 generally works well
var zScoreThresh = -1;

// shadowSumThresh: Sum of IR bands to include as shadows within TDOM and the 
//    shadow shift method (lower number masks out less)
var shadowSumThresh = 0.35;

// contractPixels: The radius of the number of pixels to contract (negative 
//    buffer) clouds and cloud shadows by. Intended to eliminate smaller cloud 
//    patches that are likely errors
// (1.5 results in a -1 pixel buffer)(0.5 results in a -0 pixel buffer)
// (1.5 or 2.5 generally is sufficient)
var contractPixels = 1.5; 

// dilatePixels: The radius of the number of pixels to dilate (buffer) clouds 
//    and cloud shadows by. Intended to include edges of clouds/cloud shadows 
//    that are often missed
// (1.5 results in a 1 pixel buffer)(0.5 results in a 0 pixel buffer)
// (2.5 or 3.5 generally is sufficient)
var dilatePixels = 2.5;

// 12. correctIllumination: Choose if you want to correct the illumination using
// Sun-Canopy-Sensor+C correction. Additionally, choose the scale at which the
// correction is calculated in meters.
var correctIllumination = false;
var correctScale = 250;//Choose a scale to reduce on- 250 generally works well

//13. Export params
//Whether to export composites
var exportComposites = false;

//Set up Names for the export
var outputName = 'Harmonic_Coefficients_';

//Provide location composites will be exported to
//This should be an asset folder, or more ideally, an asset imageCollection
var exportPathRoot = 'users/iwhousman/test/ChangeCollection';

// var exportPathRoot = 'projects/USFS/LCMS-NFS/R4/BT/Base-Learners/Base-Learners-Collection';
//CRS- must be provided.  
//Common crs codes: Web mercator is EPSG:4326, USGS Albers is EPSG:5070, 
//WGS84 UTM N hemisphere is EPSG:326+ zone number (zone 12 N would be EPSG:32612) and S hemisphere is EPSG:327+ zone number
var crs = 'EPSG:5070';

//Specify transform if scale is null and snapping to known grid is needed
var transform = [30,0,-2361915.0,0,-30,3177735.0];

//Specify scale if transform is null
var scale = null;


////////////////////////////////////////////////
//Harmonic regression parameters

//Which harmonics to include
//Is a list of numbers of the n PI per year
//Typical assumption of 1 cycle/yr would be [2]
//If trying to overfit, or expected bimodal phenology try adding a higher frequency as well
//ex. [2,4]
var whichHarmonics = [2];

//Which bands/indices to run harmonic regression across
var indexNames =['NDVI','NBR','swir1'];//,'NBR','NDMI','nir','swir1','swir2','tcAngleBG'];//['nir','swir1','swir2','NDMI','NDVI','NBR','tcAngleBG'];//['blue','green','red','nir','swir1','swir2','NDMI','NDVI','NBR','tcAngleBG'];

var detrend = false;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//Function Calls
//Get all images
var allScenes = getImageLib.getProcessedLandsatScenes(studyArea,startYear,endYear,startJulian,endJulian,
  
  toaOrSR,includeSLCOffL7,defringeL5,applyCloudScore,applyFmaskCloudMask,applyTDOM,
  applyFmaskCloudShadowMask,applyFmaskSnowMask,
  cloudScoreThresh,cloudScorePctl,
  zScoreThresh,shadowSumThresh,
  contractPixels,dilatePixels
  ).select(indexNames);
  

////////////////////////////////////////////////////////////
//Iterate across each time window and fit harmonic regression model
var coeffCollection = ee.List.sequence(startYear+timebuffer,endYear-timebuffer,1).getInfo().map(function(yr){
  //Set up dates
  var startYearT = yr-timebuffer;
  var endYearT = yr+timebuffer;
  
  //Get scenes for those dates
  var allScenesT = allScenes.filter(ee.Filter.calendarRange(startYearT,endYearT,'year'));
  
  //Fit harmonic model
  var coeffsPredicted =getImageLib.getHarmonicCoefficientsAndFit(allScenesT,indexNames,whichHarmonics,detrend);
  
  //Set some properties
  var coeffs = coeffsPredicted[0]
            .set({'system:time_start':ee.Date.fromYMD(yr,6,1).millis(),
            'timebuffer':timebuffer,
            'startYearT':startYearT,
            'endYearT':endYearT,
            }).float();
  Map.addLayer(coeffs,{},'coeffs',false);
  //Get predicted values for visualization
  var predicted = coeffsPredicted[1];
  Map.addLayer(predicted,{},'predicted',false);
  
  //Optionally simplify coeffs to phase, amplitude, and date of peak
  if(whichHarmonics.indexOf(2) > -1){
    var pap = ee.Image(getImageLib.getPhaseAmplitudePeak(coeffs));
    print(pap);
    
    var vals = coeffs.select(['.*_intercept']);
    var amplitudes = pap.select(['.*_amplitude']);
    var phases = pap.select(['.*_phase']);
    var peakJulians = pap.select(['.*peakJulianDay']);
    var AUCs = pap.select(['.*AUC']);
    
    Map.addLayer(amplitudes,{},'amplitudes',false);
    Map.addLayer(AUCs,{},'AUCs',false);
    Map.addLayer(peakJulians,{'min':0,'max':365},'peakJulians',false);
  
    
    // Turn the HSV data into an RGB image and add it to the map.
    var seasonality = ee.Image.cat(phases.select([0]), 
                                    amplitudes.select([0]), 
                                    vals.select([0])).hsvToRgb();
  
    Map.addLayer(seasonality, {'min':0,'max':1}, 'Seasonality',false);
    
  }
  
  //Export image
  var coeffsOut;
  if(detrend === false){
   coeffsOut = coeffs
    .multiply(1000).int16(); 
  }else{coeffsOut = coeffs.float();}
  
    
  coeffsOut = coeffsOut.copyProperties(coeffs)
                        .copyProperties(coeffs,['system:time_start']);
  

  var outName = outputName + startYearT.toString() + '_'+ endYearT.toString();
  var outPath = exportPathRoot + '/' + outName;
  getImageLib.exportToAssetWrapper(coeffs,outName,outPath,
  'mean',studyArea,scale,crs,transform);
  return coeffs;
  
});

// // coeffCollection = ee.ImageCollection(coeffCollection);
// // Map.addLayer(coeffCollection);