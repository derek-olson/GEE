/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var topoAll = ee.Image("users/thinkbetween/SC_topoComposite_forTesting"),
    LCMS = ee.Image("users/thinkbetween/SC_Landsat_SR_1984_2018_190_250_lcmsCONUS_mtbs"),
    sa = /* color: #0b4a8b */ee.Geometry.Polygon(
        [[[-113.104248046875, 43.492782808224995],
          [-112.379150390625, 44.86365630540611],
          [-114.246826171875, 45.79050946752472],
          [-115.33447265625, 44.32384807250689]]]),
    climPCA = ee.Image("users/thinkbetween/SC_climatePrincipalComponents_forTesting"),
    chartGeom = /* color: #00ffff */ee.Geometry.Polygon(
        [[[-114.5599365234375, 44.472991172602526],
          [-113.8623046875, 44.4377021634654],
          [-113.8568115234375, 44.735027899515465],
          [-114.4720458984375, 44.742831723317565]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var bound = ee.FeatureCollection('ft:1UuFquverkIKyJf09aDxGdFU9Y4V3jVIkLhwZ2J-W');
Map.addLayer(bound, {}, 'bound', false);

//Set the number of clusters
var clustNum = 10;

//Get datasets as assets
var climate = climPCA.clip(sa).select([0]).multiply(10000).int16();
var topo = topoAll.clip(sa).select([0,1,4,5,6]);
var ndvi = LCMS.normalizedDifference(['nir','red']).multiply(10000).int16();
ndvi = ndvi.clip(sa);

//Add layers to map
Map.addLayer(climate, {}, 'climate',false);
Map.addLayer(topo, {}, 'topo',false);
Map.addLayer(ndvi, {}, 'ndvi',false);

//Create composite
var composite = climate.addBands(topo).addBands(ndvi);
print('composite:', composite);

//Get a list of the band names
var bands = composite.bandNames().getInfo();
print('bands:', bands);

//rescale the composite for segmentation
var scaledImageList = bands.map(function(band){
  //Get each band
  var inBand = composite.select(band);
  
  //Find the min value
  var min = inBand.reduceRegion({
    reducer: ee.Reducer.min(),
    geometry: composite.geometry(),
    scale: 30,
    maxPixels: 1e13
  });
  min = min.get(band);
  //print('min:', min);
  
  //Create a constant raster with the min value
  var minBand = ee.Image.constant(min);
  //print('minBand:', minBand)
  //Find the max value
  var max = inBand.reduceRegion({
    reducer: ee.Reducer.max(),
    geometry: composite.geometry(),
    scale: 30,
    maxPixels: 1e13
  });
  max = max.get(band);
  //print('max:', max);
  
  //Create a constant raster with the max value
  var maxBand = ee.Image.constant(max);
  //print('maxBand:', maxBand)
  var numerator = inBand.subtract(minBand);
  var denominator = maxBand.subtract(minBand);
  var scaledBands = numerator.divide(denominator);
  
  return scaledBands;
});
print('scaledImageList:', scaledImageList);

//Get the list of images to a single multiband image
var scaledImage = ee.ImageCollection(scaledImageList);
scaledImage = newCollectionToImage(scaledImage);
scaledImage = scaledImage.clip(bound);
print('scaledImage:', scaledImage);

////////////////////////////////////////////////////////////////////////////////
//Helper function to convert image collection into stack of image bands
function newCollectionToImage(collection){
  var stack = ee.Image(collection.iterate(function(img, prev) {
    return ee.Image(prev).addBands(img);
  }, ee.Image(1)));

  stack = stack.select(ee.List.sequence(1, stack.bandNames().size().subtract(1)));
  return stack;
}
////////////////////////////////////////////////////////////////////////////////

//Create training data
var training = scaledImage.sample({
  scale: 30,
  numPixels: 10000
});

/*var kmeansTest = ee.Clusterer.wekaKMeans({nClusters: 10})
  .train({
    features: training
  });*/
//print(kmeans)
//Get kmeans clusters
//var clusterImage = composite.cluster(kmeansTest, 'kmeans');
//print(clusterImage);

//var kmeansComposite = clusterImage.addBands(composite);
//print('kmeansComposite:', kmeansComposite);

//Iterate through each cluster size and get the sum of the average
//cluster variance for each value of K
var kvals = ee.List.sequence({start:1, end:clustNum}).getInfo();

var kVar = kvals.map(function(kval){
  var kmeans = ee.Clusterer.wekaKMeans({nClusters: kval})
  .train({
    features: training
  });
  print('kmeans:', kmeans);
  
  //Get kmeans clusters
  var clusterImage = composite.cluster(kmeansTest, 'kmeans');
  print('clusterImage:', clusterImage);  
  
  //Get the variance for each band
  var bandVar = bands.map(function(band){
    //print('band:', band);
    var tempComposite = kmeansComposite.select([0, band]);
    //print('tempComposite:', tempComposite);
    var bandReducer = tempComposite.reduceRegion({
      reducer: ee.Reducer.variance().group({groupField: 0, groupName: 'kmeans'}),
      maxPixels: 1e13
    });
    return bandReducer;
  
  });
  print('band variance:', bandVar);

  //Extract computed stat from nested list.
  function lookup_stat(list){
    var pixelstat = ee.Dictionary(ee.List(ee.Dictionary(list).get('groups')).get(0)).get('variance');
    return pixelstat;
  }

  var stat_list = ee.List(bandVar).map(lookup_stat);
  //print('stat_list',stat_list);
 
});





//Get the variance for each band
/*var bandVar = bands.map(function(band){
  print('band:', band);
  var tempComposite = kmeansComposite.select([0, band]);
  print('tempComposite:', tempComposite);
  var bandReducer = tempComposite.reduceRegion({
    reducer: ee.Reducer.variance().group({groupField: 0, groupName: 'kmeans'}),
    maxPixels: 1e13
  });
  return bandReducer;
});
print('band variance:', bandVar);

  //Extract computed stat from nested list.
function lookup_stat(list){
  var pixelstat = ee.Dictionary(ee.List(ee.Dictionary(list).get('groups')).get(0)).get('variance');
  return pixelstat;
}

var stat_list = ee.List(bandVar).map(lookup_stat);
print('stat_list',stat_list);*/







//For each value of k and for each cluster get the variance
/*var kvals = ee.List.sequence({start:1, end:clustNum}).getInfo();
print(kvals);

var varianceSumList = kvals.map(function(kval){
  var kmeans = ee.Clusterer.wekaKMeans({nClusters: 10})
  .train({
    features: training
  });
  
  var clusterImage = composite.cluster(kmeans, 'kmeans');
  
  var kmeansComposite = clusterImage.addBands(composite);
  
  var bands = composite.bandNames();

  //Get the variance for each band
  var bandVar = bands.map(function(band){
    
    var tempComposite = kmeansComposite.select([0, band]);
    
    var bandReducer = tempComposite.reduceRegion({
      reducer: ee.Reducer.variance().group({groupField: 0, groupName: 'kmeans'}),
      maxPixels: 1e13
    });
    return bandReducer;
  });
  
  var averageVar = t

});*/









/*var varianceSumList = kvals.map(function(kval){
  //print(kval)
  //Create clusterer
  var kmeans = ee.Clusterer.wekaKMeans({nClusters: kval})
    .train({
     features: training
    });
  //print(kmeans)
  //Get kmeans clusters
  var clusterImage = composite.cluster(kmeans, 'kmeans');
  //print(clusterImage);

  var compositeVariance = composite.reduce(ee.Reducer.variance());
  //print(compositeVariance);

  var KmeansVarianceComposite = clusterImage.addBands(compositeVariance);

  var clusterVariance = KmeansVarianceComposite.reduceRegion({
    reducer: ee.Reducer.mean().unweighted().group({
      groupField:0,
      groupName: 'kmeans'
    }),
    geometry: clusterImage.geometry(),
    scale: 30,
    maxPixels: 1e13
  });
  //print(clusterVariance);

  //Try to turn the dictionary into a list; may not be necessary
  var clustVarSum = clusterVariance.get('groups')
  //print(clustVarSum)

  //Extract computed stat from nested list.
  function lookup_stat(list) {
    var pixelstat = ee.Dictionary(list).get('mean');
    return pixelstat;
  }

  var stat_list = ee.List(clustVarSum).map(lookup_stat);
  //print('stat_list',stat_list);

  var varianceSum = stat_list.reduce(ee.Reducer.sum())
  //print(varianceSum)
  
  return varianceSum; 
});

print(varianceSumList);

*/