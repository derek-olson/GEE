/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var topoAll = ee.Image("users/thinkbetween/SC_topoComposite_forTesting"),
    LCMS = ee.Image("users/thinkbetween/SC_Landsat_SR_1984_2018_190_250_lcmsCONUS_mtbs"),
    sa = /* color: #0b4a8b */ee.Geometry.Polygon(
        [[[-113.104248046875, 43.492782808224995],
          [-112.379150390625, 44.86365630540611],
          [-114.246826171875, 45.79050946752472],
          [-115.33447265625, 44.32384807250689]]]),
    climPCA = ee.Image("users/thinkbetween/SC_climatePrincipalComponents_forTesting"),
    chartGeom = /* color: #00ffff */ee.Geometry.Polygon(
        [[[-114.5599365234375, 44.472991172602526],
          [-113.8623046875, 44.4377021634654],
          [-113.8568115234375, 44.735027899515465],
          [-114.4720458984375, 44.742831723317565]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Add the boundary
var bound = ee.FeatureCollection('ft:1UuFquverkIKyJf09aDxGdFU9Y4V3jVIkLhwZ2J-W');
Map.addLayer(bound, {}, 'bound', false);

//Set the number of clusters
var clustNum = 10;

//Get datasets from assets
var climate = climPCA.clip(sa).select([0]).multiply(10000).int16();
var topo = topoAll.clip(sa).select([0,1,4,5,6]);
var ndvi = LCMS.normalizedDifference(['nir','red']).multiply(10000).int16();
ndvi = ndvi.clip(sa);

//Add layers to map
//Map.addLayer(climate, {}, 'climate',false);
//Map.addLayer(topo, {}, 'topo',false);
//Map.addLayer(ndvi, {}, 'ndvi',false);

//Create a multiband composite
var composite = climate.addBands(topo).addBands(ndvi);
print('composite:', composite);

//Get a list of the band names
var bands = composite.bandNames().getInfo()
var bandsLength = composite.bandNames().length()//.getInfo();
bandsLength = ee.List.sequence({start:1, end: bandsLength.subtract(1)})
//print('bands:', bands);

//Rescale the composite for segmentation
var scaledImageList = bands.map(function(band){
  //Get each band
  var inBand = composite.select(band);
  
  //Find the min value
  var min = inBand.reduceRegion({
    reducer: ee.Reducer.min(),
    geometry: composite.geometry(),
    scale: 30,
    maxPixels: 1e13
  });
  min = min.get(band);
  
  //Create a constant raster with the min value
  var minBand = ee.Image.constant(min);
  
  //Find the max value
  var max = inBand.reduceRegion({
    reducer: ee.Reducer.max(),
    geometry: composite.geometry(),
    scale: 30,
    maxPixels: 1e13
  });
  max = max.get(band);
  
  //Create a constant raster with the max value
  var maxBand = ee.Image.constant(max);
  var numerator = inBand.subtract(minBand);
  var denominator = maxBand.subtract(minBand);
  var scaledBands = numerator.divide(denominator);
  
  return scaledBands;
});
//print('scaledImageList:', scaledImageList);

//Get the list of images to a single multiband image
var scaledImage = ee.ImageCollection(scaledImageList);
scaledImage = newCollectionToImage(scaledImage);
scaledImage = scaledImage.clip(sa)//.reproject('EPSG:26912');
//print('scaledImage:', scaledImage);
Map.addLayer(scaledImage, {}, 'scaledImage');

////////////////////////////////////////////////////////////////////////////////
//Helper function to convert image collection into stack of image bands
function newCollectionToImage(collection){
  var stack = ee.Image(collection.iterate(function(img, prev) {
    return ee.Image(prev).addBands(img);
  }, ee.Image(1)));

  stack = stack.select(ee.List.sequence(1, stack.bandNames().size().subtract(1)));
  return stack;
}
////////////////////////////////////////////////////////////////////////////////

//Create training data
var training = scaledImage.sample({
  scale: 30,
  numPixels: 10000
  });

/*var kmeansTest = ee.Clusterer.wekaKMeans({nClusters: 10})
  .train({
    features: training
  });*/
//print(kmeans)
//Get kmeans clusters
//var clusterImage = composite.cluster(kmeansTest, 'kmeans');
//print(clusterImage);

//var kmeansComposite = clusterImage.addBands(composite);
//print('kmeansComposite:', kmeansComposite);

////////////////////////////////////////////////////////////////////////////////////
//Extract computed stat from nested list.
function lookup_stat(list){
  var pixelstat = ee.Dictionary(ee.List(ee.Dictionary(list).get('groups')).get(0)).get('variance');
  return pixelstat;
}
////////////////////////////////////////////////////////////////////////////////////  

//Iterate through each cluster size and get the sum of the average
//cluster variance for each value of K
var kvals = ee.List.sequence({start:1, end:clustNum}).getInfo();

var kVar = kvals.map(function(kval){
  var kmeans = ee.Clusterer.wekaKMeans({nClusters: kval})
  .train({
    features: training
  });
  print('kmeans:', kmeans);
  
  //Get kmeans clusters
  var clusterImage = scaledImage.cluster(kmeans, 'kmeans');
  print('clusterImage:', clusterImage);  
  
  var kmeansComposite = clusterImage.addBands(scaledImage);
  //print('kmeansComposite:', kmeansComposite);
  
  //Get the variance for each band by kvalue
  var avgBandVar = bands.map(function(band){
    //print('band:', band);
    var tempComposite = kmeansComposite.select([0, band]);
    //print('tempComposite:', tempComposite);
    var bandVar = tempComposite.reduceConnectedComponents({
      reducer: ee.Reducer.variance(),
      labelBand: 'kmeans',
      maxSize: 256
    });
    //print('bandReducer:', bandReducer)
    //Get the average variance for each band
    var bandVarMean = bandVar.reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: bandVar.geometry(),
      scale: 30,
      maxPixels: 1e13
    });
    return ee.List(bandVarMean.values()).get(0);
  });
  print('band variance:', avgBandVar);

  var kSum = ee.List(avgBandVar).reduce(ee.Reducer.mean());
  //print('ksum:', kSum)
  
  return kSum;
});

print('kvar:', kVar);

// Define customization options.
var options = {
  title: 'Variance by cluster size',
  hAxis: {title: 'kvalues'},
  vAxis: {title: 'variance'},
  lineWidth: 1,
  pointSize: 4,
  series: {
    0: {color: '00FF00'},

}};

var kVarArray = ee.Array(kVar);

var chart = ui.Chart.array.values(kVarArray,0, kvals).setChartType('LineChart').setOptions(options);
print(chart);




