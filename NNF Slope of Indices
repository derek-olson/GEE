/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var sa = /* color: 0B4A8B */ee.Geometry.Polygon(
        [[[-114.22073364257812, 36.60229913579044],
          [-113.65493774414062, 36.75979104322286],
          [-113.455810546875, 36.88840804313823],
          [-113.26904296875, 37.18548452548039],
          [-113.36105346679688, 37.20080005987362],
          [-113.52447509765625, 37.165788559578765],
          [-113.63571166992188, 37.092430683283474],
          [-113.67141723632812, 37.09023980307208],
          [-113.75518798828125, 37.03983207971425],
          [-113.90899658203125, 36.96854668458301],
          [-114.20013427734375, 36.832370801556834],
          [-114.25918579101562, 36.78729146682001],
          [-114.32373046875, 36.711366342819254],
          [-114.3731689453125, 36.595684037179076],
          [-114.37728881835938, 36.56039393337068],
          [-114.35806274414062, 36.51736231572707],
          [-114.30038452148438, 36.511843709862454],
          [-114.27841186523438, 36.53943280355122],
          [-114.27017211914062, 36.59127365634205]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Get time variables
var startDate = new Date('01/01/1990')
var endDate = new Date('12/31/2015')
var startJulian = 152
var endJulian = 273

//Get the bands right
var sensor_band_dict =ee.Dictionary({L8 : ee.List([1,2,3,4,5,9,6]),
                        L7 : ee.List([0,1,2,3,4,5,7]),
                        L5 : ee.List([0,1,2,3,4,5,6]),
                        L4 : ee.List([0,1,2,3,4,5,6])
  });
  
var bandNames = ee.List(['blue','green','red','nir','swir1','temp','swir2']);

//Mask out clouds and cloud shadows
//cloud busting function
var bust_clouds = function(image) {
  
  image = ee.Algorithms.Landsat.simpleCloudScore(image);
  var quality = image.select('cloud');
  var cloud01 = quality.gt(10);
  var maskedImage = image.mask().and(cloud01.not());
  image = image.mask(maskedImage);
  return image;
};

//modular TDOM
// function simpleTDOM(collection,zShadowThresh,maskAllDarkPixels){
//       var shadowSumBands = ['nir','swir1','swir2']
//       var sSName = 'shadowSum'
//       var startBandNames = ee.Image(collection.first()).bandNames();
//       var collection = collection.map(function(img){
//         var shadowSum = img.select(shadowSumBands).reduce(ee.Reducer.sum()).select([0],[sSName])
//         return img.addBands(shadowSum);
//       })
      
//       if(maskAllDarkPixels === true){
//         collection = collection.map(function(img){
//           return img.mask(img.mask().and(img.select([sSName]).gt(200)))
//         })
//       }
//       var shadowStd = collection.select(sSName).reduce(ee.Reducer.stdDev());
//       var shadowMean = collection.select(sSName).mean();
     
//       collection = collection.map(function(img){
//         var tShadowSum = img.select(shadowSumBands).reduce(ee.Reducer.sum()).select([0],['shadowSumT']);
//         var zScore = tShadowSum.subtract(shadowMean).divide(shadowStd).select([0],['zShadow']);
//         var m = zScore.gt(zShadowThresh);
//         return img.mask(img.mask().and(m)).select(startBandNames);
//       })
//       return collection;
//     } 
    
//////////////////////////////////////////////////////////////////////////
function simpleTDOM2(c){
  var shadowSumBands = ['nir','swir1'];

  var irStdDev = c.select(shadowSumBands).reduce(ee.Reducer.stdDev());
  var irMean = c.select(shadowSumBands).mean();
  
  c = c.map(function(img){
    var z = img.select(shadowSumBands).subtract(irMean).divide(irStdDev);
    var irSum = img.select(shadowSumBands).reduce(ee.Reducer.sum())
    var m = z.lt(-1).reduce(ee.Reducer.sum()).eq(2).and(irSum.lt(0.4)).not();
    
    // m = m.and(darkMask.eq(0))
    return img.updateMask(img.mask().and(m));
  })
  
  return c.select(bandNames)
}

////////////////////////////////////////////////////////////////

//add Julian data band
var createTimeBand = function(image) 
{
  var d = ee.Date(image.get('system:time_start'));
  var year = d.get('year');
  var proportion = d.getFraction('year');
  var yearProportion = ee.Image(year.add(proportion)).float();
  return image.addBands(yearProportion.select([0],['year']))
 };
//create indices 
var NDVI = function(image)
{
  var VI = image.normalizedDifference(['nir', 'red'])
  return image.addBands(VI.select([0],['NDVI']))
}

//add NDWI band
var NDWI = function(image)
{
  var WI = image.normalizedDifference(['nir', 'swir1'])
  return image.addBands(WI.select([0],['NDWI']))
}

//add NDII7 band
var NDII7 = function(image)
{
  var II7 = image.normalizedDifference(['nir', 'swir2'])
  return image.addBands(II7.select([0],['NDII7']))
}

//add EVI band
var EVI = function(image)
{
  var num = image.select(['nir']).subtract(image.select(['red']))
  var den = image.select(['red']).multiply(6)
  var den2 = image.select(['blue']).multiply(7.5)
  var den3 = image.select(['nir']).add(den)
  var den4 = den3.subtract(den2)
  var den5 = den4.add(1)
  var evi = num.divide(den5)
  return image.addBands(evi.select([0],['EVI']))
  
}

//Create L5 and L8 merged collection
var L5 = ee.ImageCollection('LT5_L1T_TOA')
        .filterDate(startDate,endDate)
        .filter(ee.Filter.calendarRange(startJulian,endJulian))
        .filterBounds(sa)
        .map(bust_clouds)
        .select(sensor_band_dict.get('L5'),bandNames)
        
var L7 = ee.ImageCollection('LE7_L1T_TOA')
        .filterDate(startDate,endDate)
        .filter(ee.Filter.calendarRange(startJulian,endJulian))
        .filterBounds(sa)
        .map(bust_clouds)
        .select(sensor_band_dict.get('L7'),bandNames)

var L8 = ee.ImageCollection('LC8_L1T_TOA')
        .filterDate(startDate,endDate)
        .filter(ee.Filter.calendarRange(startJulian,endJulian))
        .filterBounds(sa)
        .map(bust_clouds)
        .select(sensor_band_dict.get('L8'),bandNames)

//selected and renamed bands for both collections
var ls = ee.ImageCollection(L5.merge(L7).merge(L8));

var Imagery = simpleTDOM2(ls)
Imagery = Imagery.map(NDVI)
Imagery = Imagery.map(NDWI)
Imagery = Imagery.map(NDII7)
Imagery = Imagery.map(EVI)
Imagery = Imagery.map(createTimeBand)

//choose index
var index = 'NDVI'

//Map year of minimum index
var inverter = function(inImage)
  {
    return(inImage.multiply(-1))
  }

var minYearGetter = function(inCollection,bandName)
  {
    var newCollection = inCollection.map(inverter)
    return(newCollection.qualityMosaic(bandName).select('year').multiply(-1));
  }
  
var lowYear = minYearGetter(Imagery,index)
Map.addLayer(lowYear)

//Map year of maximum index
var maxYearGetter = function(inCollection,bandName)
  {
    var maxCollection = inCollection.qualityMosaic(bandName).select('year')
    return(maxCollection);
  }
  
var highYear = maxYearGetter(Imagery,index)
Map.addLayer(highYear)

//////////////////////////////////////////////////
//Was there a disturbance? What year was it?
/////////////////////////////////////////////////
var reference = Imagery.filterDate('1990-01-01', '1992-12-31').mean()

var series = Imagery


//////////////////////////////////////////////////

//linear reducer
// Reduce the collection with the linear fit reducer.
// Independent variable are followed by dependent variables.
var linearFit = Imagery.select(['year', index])
  .reduce(ee.Reducer.linearFit());

// Display the results.
//Map.setCenter(-103.0023, 42.8317, 8);
Map.addLayer(linearFit.select(['scale']),
  {min: -0.01, max: 0.01}, 'fit');

//Map Actual vs Predicted
var actualPredicted = Imagery.map(function(img){
  var predicted = img.select(['year']).multiply(linearFit.select('scale')).add(linearFit.select('offset')).select([0],['predicted' + index]);
  var actual = img.select([index]).select([0],['actual' + index]);
  return actual.addBands(predicted)
})
Map.addLayer(actualPredicted);

var ForestBound = ee.FeatureCollection('ft:1G8Ksi499F13l7SpOTDn2VelzLILW-EDdAx9y2G0C', 'geometry');
Map.addLayer(ForestBound)

// var regionJSON = JSON.stringify(sa.getInfo());
// var info = linearFit.getInfo()
// Export.image(linearFit,'BHNFscale',{'maxPixels': 2e9,'region':regionJSON,crs:info.crs, 'scale':30, crs_transform:JSON.stringify(info.crs_transform)});

// Export.image(linearFit, "NNF_Slope_NDVI",
//       {'maxPixels': 2e9,
//         'region': sa.bounds().getInfo().coordinates[0],
//         'crs':  'EPSG:26913',
//         'scale': 30
//       });
       
