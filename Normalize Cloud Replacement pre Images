/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var boundBox = /* color: d63000 */ee.Geometry.Polygon(
        [[[-108.34716796875, 40.375843776960124],
          [-108.3856201171875, 38.77121637244273],
          [-105.4412841796875, 38.71980474264239],
          [-105.5072021484375, 40.43022363450859]]]),
    image = ee.Image("users/thinkbetween/WRNF_preDisturbance_final"),
    image2 = ee.Image("users/thinkbetween/cloudReplace_preDisturbance");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var ForestBound = ee.FeatureCollection('ft:1evoQ9ZDFqzGXiG2COjauqpXy6RI4BIWu54cMUSID', 'geometry');
var STD_NAMES = ['B1','B2','B3','B4','B5','B6','B7'];
var Out_Names = ['B1','B2','B3','B4','B5','B6','B7','Year', 'Julian'];
var OutImageName = "WRNF_cloudReplace_pre_normal";

// var mosaic35 = ee.ImageCollection.fromImages([ee.Image('LT5/LT50350321986209XXX05'), ee.Image('LT5/LT50350331986209XXX13')]);
// // Mosaic Path 35. Last layer is on top.
// var path35 = mosaic35.mosaic().clip(boundBox);

// var mosaic34 = ee.ImageCollection.fromImages([ee.Image('LT5/LT50340331987205XXX09'), ee.Image('LT5/LT50340321987205XXX03')]);
// // Mosaic Path 34. Last layer is on top.
// var path34 = mosaic34.mosaic().clip(boundBox);

// Specify zone
var zone = 13;

//Function for getting the PIFs (returns like pixels)
function getPIFsPair(img1, img2, bandsPIF)
  {
  var diff = img1.subtract(img2);
  var region = diff.geometry();
  //reducer parameters
  var calcParamsMean = 
        {     
          'reducer': ee.Reducer.mean(),
          'geometry': region, 
          'scale': 90, 
          'bestEffort': true,
          'maxPixels': 500000000,
          'tileScale': 8,
          'crs':  'EPSG:326' + zone.toString()
        };
  var calcParamsStdDev = 
        {     
          'reducer': ee.Reducer.stdDev(),
          'geometry': region, 
          'scale': 90, 
          'bestEffort': true,
          'maxPixels': 500000000,
          'tileScale': 8,
          'crs':  'EPSG:326' + zone.toString()
        };
  //compute the difference to find unchanged pixels 
  var all_bandsDiff = img1.subtract(img2);
  
  //Initialize an empty image
  var masked = ee.Image.constant(0);
  //loop through the bands and get statistics  
  for(var i in bandsPIF)
    {
      //initialize a new empty image for each band PIF selection
      var masked2 = ee.Image.constant(0);
      var bandname = bandsPIF[i];
      //compute the mean/stdDev value for the band
      var StdDev = ee.Image.constant(all_bandsDiff.select(bandname).reduceRegion(calcParamsStdDev).get(bandname));
      var StdDevTH = StdDev.divide(1);
      var diffMean = ee.Image.constant(all_bandsDiff.select(bandname).reduceRegion(calcParamsMean).get(bandname));
      var THupper = diffMean.add(StdDevTH);
      var THlower = diffMean.subtract(StdDevTH);
      //where the difference value is less than the threshold, add a 1
      var maskedTemp = masked2.where(all_bandsDiff.select(bandname).lt(THupper),1);
      var maskedTemp2 = maskedTemp.where(all_bandsDiff.select(bandname).lt(THlower),0);
      //add up the values in the the specified bands
      masked = masked.add(maskedTemp2);
    }
  //Find the pixels that have low variance in all the given bands and clip this image to the region to avoid extrapolation 
  var potentialPIFs = masked.eq(bandsPIF.length).clip(region);
  //Return these locations -Value of 1 with non PIFs masked out
  return potentialPIFs.mask(potentialPIFs);
  }

//NORMALIZE W REGRESSION
// This function returns one corrected image and can be mapped across the stack to return a corrected stack
var imgNormalizer = function(slave, master, PIFpixels)
    {
    
    var diff = slave.subtract(master);
    var region = diff.geometry();
    var calcParamsLF = 
        {     
          'reducer': ee.Reducer.linearFit(),
          'geometry': region, 
          'scale': 90, 
          'bestEffort': true,
          'maxPixels': 500000000,
          'tileScale': 8,
          'crs':  'EPSG:326' + zone.toString()
        }
    var PIFslave = slave.mask(PIFpixels);
    var PIFmaster = master.mask(PIFpixels);
    
    //Get the statistics and make them constant images to be used in band math correction
    //Empty array to hold corrected bands
    var contArray = []
    //Loop through bands, get regression coeffs and correct
    for (var band in STD_NAMES){
      //Make a 2 band image for regression
      var regImg = ee.Image([PIFslave.select([STD_NAMES[band]]),PIFmaster.select([STD_NAMES[band]])]);
      //Get the intercept
      var intercept = regImg.reduceRegion(calcParamsLF).get('offset'); 
      //Get the slope
      var slope = regImg.reduceRegion(calcParamsLF).get('scale');
      //Use the coefficients to create constant images that could then be used for the band math correction functions. 
      var SlopeImg = ee.Image.constant(slope);
      var IntImg = ee.Image.constant(intercept);
      //Select the corresponding band to correct
      var band2Correct = slave.select([STD_NAMES[band]]);
      //Linear correction = y = int + slope*x
      var corrBand = band2Correct.multiply(SlopeImg).add(IntImg);
      contArray.push(corrBand.toUint16());
    }
    // ouptput the corrected slave?  
    return ee.Image.cat(contArray); 
    };
 
 //Function to fill in the image with with the normalized cloud bits
// var fillHoles = function(image2Fill, cloudImg)
//  {
    //Sum the images to get a sort of reference image
//    var addImg = image2Fill.add(cloudImg); 
    //where the add image 
//    var imageMosaic = image2Fill.where(image2Fill.lt(addImg), cloudImg);
//    return imageMosaic;
//  };
////////////////////////////////////////////////////////////////////////////////
// Get Julian Date Map And Year
// Add Time Stamp band (julian date)
// var addJulianBand = function(img1, img2) {
//     var msecPerDay = 24*60*60*1000;
//     var epoch = new Date("2008/01/01 GMT").getTime();
//     var timestamp = img1.metadata('system:time_start');
//     timestamp =  timestamp.subtract(epoch).mod(365*msecPerDay).divide(msecPerDay).subtract(1).toInt();
//     timestamp = timestamp.mask(img1.select([0]).gte(0).or(img1.select([1]).gte(0)).or(img1.select([2]).gte(0)).or(img1.select([3]).gte(0)).or(img1.select([4]).gte(0)).or(img1.select([5]).gte(0)).or(img1.select([6]).gte(0))); 
//     return img2.addBands(timestamp.select([0],["Julian"]));
//   };

// var addYearBand = function(img1, img2){
//   var i =img1.metadata('system:time_start').divide(365).divide(3600).divide(24).divide(1000);
//   i = i.add(1970).toInt();
//   i = i.mask(img1.select([0]).gte(0).or(img1.select([1]).gte(0)).or(img1.select([2]).gte(0)).or(img1.select([3]).gte(0)).or(img1.select([4]).gte(0)).or(img1.select([5]).gte(0)).or(img1.select([6]).gte(0)));
//   return img2.addBands(i.select([0],['Year']));
// };

// ////////////////////////////////////////////////////////////////////////////////
// //Add order of mosaicking. Highest number is goes on top
// var addPriority = function(img1, constant){
//   var C = ee.Image.constant(constant).toInt();
//   var outImage = img1.addBands(C.select([0],['priority']));
//   outImage = outImage.mask(img1.select([0]).gte(0).or(img1.select([1]).gte(0)).or(img1.select([2]).gte(0)).or(img1.select([3]).gte(0)).or(img1.select([4]).gte(0)).or(img1.select([5]).gte(0)).or(img1.select([6]).gte(0)));
//   return outImage;
// };

//Use functions
var PIFS1 = getPIFsPair(image,image2,['b2','b3','b4','b5']);
addToMap(PIFS1,{},"PIFS")
var corrected1 = imgNormalizer(image2, image, PIFS1);
// corrected1 = addYearBand(ee.Image('LT5/LT50340321995243XXX02'),corrected1);
// corrected1 = addJulianBand(ee.Image('LT5/LT50340331995243XXX02'),corrected1);
// corrected1 = addPriority(corrected1,1);

//var PIFS2 = getPIFsPair(pr3734,pr3834,['B2','B3','B4','B5']);
//var corrected2 = imgNormalizer(pr3734, pr3834, PIFS2);
//corrected2 = addYearBand(pr3734,corrected2);
//corrected2 = addJulianBand(pr3734,corrected2);
//corrected2 = addPriority(corrected2,1);

// path35 = addYearBand(ee.Image('LT5/LT50350321986209XXX05'),path35);
// path35 = addJulianBand(ee.Image('LT5/LT50350331986209XXX13'),path35);
// image2 = addPriority(image2,3);
addToMap(corrected1,{},'correct')

//var imageList = ee.List([corrected1,pr3834,corrected2]);
// var mosaic = ee.ImageCollection([corrected1,image2]).qualityMosaic("priority");
// addToMap(mosaic,{'bands': ['B5', 'B4', 'B3'],'min':1000,'max':34000},"mosaic");
// var mosaic = mosaic.toUint16().select(Out_Names);
//addToMap(mosaic.select(['b5','b4','b3']),{min:"7000",max:"25000"},"mosaic");
//addToMap(mosaic.select(['priority']),{min:"0",max:"10"},"mosaicdate");
//addToMap(corrected1.select(['B5','B4','B3']),{min:"7000",max:"25000"},"pr3934corrected",false);
//addToMap(corrected2.select(['B5','B4','B3']),{min:"7000",max:"25000"},"pr3734corrected",false);
//addToMap(pr3734.select(['B5','B4','B3']),{min:"7000",max:"25000"},"pr3734",false);
//addToMap(pr3934.select(['B5','B4','B3']),{min:"7000",max:"25000"},"pr3934",false);
//addToMap(pr3834,{min:"7000",max:"25000"},"pr3834",false);
addToMap(ForestBound,{},"WR");

print(corrected1, OutImageName,
       {'maxPixels': 2e9,
         'region': ForestBound.geometry().bounds().getInfo().coordinates[0],
         'crs':  'EPSG:26913',
         'scale': 30
       });