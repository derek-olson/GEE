/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var hansen = ee.Image("UMD/hansen/global_forest_change_2017_v1_5"),
    dx_har = ee.Image("users/thinkbetween/Dixie_Harmonics"),
    dx_comp = ee.Image("users/thinkbetween/Dixie_Composite");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// define a study area
var sa = dx_comp.geometry();

// set a threshold for forest cover
var covThresh = 20;

var forest = ee.Image('UMD/hansen/global_forest_change_2017_v1_5').select(0);
var referenceData = forest.gt(covThresh).clip(sa);
//print(referenceData);
Map.addLayer(referenceData);

// get predictor rasters as multi-band image
var predictors = dx_comp.addBands(dx_har.clip(sa));
print('predictors', predictors);


// combine reference and explanatory data
var composite = referenceData.addBands(predictors);

// get column name of reference field as a string
var responseField = 'treecover2000';

// choose classifier 
var classifier = ee.Classifier.randomForest;

// choose classifier parameters
var classifierParameters = {numberOfTrees:500};

// choose classifier output mode: CLASSIFICATION, REGRESSION, PROBABILITY
var mode = 'CLASSIFICATION';

// choose projection
var crs = 'EPSG:26912';

// choose resolution
var scale = 30;

// choose export name
var exportName = 'Forest_NonForest';

// Sample the training image at 1000 points to get the training & testing data
var trainingTesting = composite.sample({
  region: predictors.geometry(), 
  scale: 30, 
  numPixels: 10000
});
//print('trainingTesting', trainingTesting)

// Randomly split the data into 60% for training, and 40% for testing
trainingTesting = trainingTesting.randomColumn('random',484789);
var trainingData = trainingTesting
  .filter(ee.Filter.lt('random', 0.9));
var testingData = trainingTesting
  .filter(ee.Filter.gte('random', 0.9));
//print('training data:', referenceData)

var out = classificationWrapper(predictors, trainingData, responseField, classifier, classifierParameters, mode, crs, null, scale);
print('out', out);

// export the classified result
Export.image.toDrive({image: out[1], description: exportName, region: sa, scale: scale, crs: crs, maxPixels: 1e13});

// add the classified result to the map
Map.addLayer(out[1], {min:0, max:1}, 'forest');

///////////////////////////////////////////////////////////////////////////////////////////////
// classification 
///////////////////////////////////////////////////////////////////////////////////////////////
function classificationWrapper(predictors, trainingData, responseField, classifier, classifierParameters, mode, crs, transform, scale){
  // create a feature to get the reference data properties
  var ref = forest.sample({region: composite.geometry(), scale: 30, numPixels: 10});
  
  // separate out the explanatory fields from the response fields
  var inputProperties = ee.Feature(trainingData.first()).propertyNames();
  print('inputProperties:', inputProperties);
  var refDataProperties = ee.Feature(ref.first()).propertyNames();
  print('refDataProperties:', refDataProperties);
  inputProperties = inputProperties.removeAll(refDataProperties);
  inputProperties = inputProperties.remove('random');
  print('inputProperties:', inputProperties);
  
  var model = classifier(classifierParameters).setOutputMode(mode).train({
    features: trainingData,
    classProperty: responseField,
    inputProperties: inputProperties, 
    subsampling: 1,
    subsamplingSeed: 0});
  
  var applyModel = predictors.classify(model);
  //Map.addLayer(applyModel, {}, 'Classified Raster');

  return [model, applyModel];
  
}


