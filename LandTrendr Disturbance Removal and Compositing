/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-111.02031249999999, 41.29819513068913],
          [-111.02031249999999, 40.52607440500875],
          [-109.65800781249999, 40.52607440500875],
          [-109.65800781249999, 41.29819513068913]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

var getImagesLib = require('users/USFS_GTAC/modules:getImagesLib.js');  
var changeDetectionLib = require('users/USFS_GTAC/modules:changeDetectionLib.js');  

/*//////////////////////////////////////////////////////////////////////////////
DESCRIPTION:
This script accomplishes several tasks:
 1) Loads study region 
 2) Collects Landsat 4,5,7,8 imagery for a specified season and year range 
 3) Masks shadows and clouds from collection
 4) Masks out post-disturbance pixels (using LandTrendr and MTBS fire data)
 5) Gets medoid or median pixels from collection composite
 6) Exports disturbance-free imagery
*///////////////////////////////////////////////////////////////////////////////
// Define user parameters:

// 1. Specify study area: Study area
// Can specify a country, provide a fusion table  or asset table (must add 
// .geometry() after it), or draw a polygon and make studyArea = drawnPolygon

var US = ee.FeatureCollection('TIGER/2016/States');//.select('Vermont');
// Map.addLayer(US, '', 'US');
var bnd = /* color: #98ff00 */ee.Geometry.Polygon(
        [[[-123.32499999999999, 50.025174538680666],
          [-126.92851562499999, 48.592739812476886],
          [-126.22539062499999, 37.461515212585624],
          [-118.31523437499999, 30.472062774000296],
          [-106.53789062499999, 29.405816116688545],
          [-96.78203124999999, 23.669378111776012],
          [-94.32109374999999, 27.785338114055087],
          [-85.35624999999999, 27.62971332390822],
          [-85.00468749999999, 21.886679356303823],
          [-72.43632812499999, 23.669378111776012],
          [-79.20390624999999, 30.850078726773173],
          [-72.78789062499999, 34.83607775945183],
          [-63.64726562499999, 45.66373462232505],
          [-69.62382812499999, 49.45719776213093],
          [-79.73124999999999, 44.85952758774577],
          [-85.88359374999999, 49.79878161214739]]]);
//print ('us:',US);
var sa = geometry;
//ee.FeatureCollection('ft:1UuFquverkIKyJf09aDxGdFU9Y4V3jVIkLhwZ2J-W').geometry().bounds();
Map.addLayer(sa, {}, 'roi', false);
var studyArea = sa;

// 2. Update the startJulian and endJulian variables to indicate your seasonal 
// constraints. This supports wrapping for tropics and southern hemisphere.
// startJulian: Starting Julian date 
// endJulian: Ending Julian date
var startJulian = 190;
var endJulian = 273; 

// 3. Specify start and end years for all analyses
// More than a 3 year span should be provided for time series methods to work 
// well. If using Fmask as the cloud/cloud shadow masking method, this does not 
// matter
var startYear = 2008;
var endYear = 2018;

// 4. Specify an annual buffer to include imagery from the same season 
// timeframe from the prior and following year. timeBuffer = 1 will result 
// in a 3 year moving window
var timebuffer = 0;

// 5. Set up Names for the export
var outputName = 'DisturbanceFree'; 

// 6. Provide location composites will be exported to
var exportPathRoot = 'users/thinkbetween';

// 7. Choose medoid or median compositing method. 
// Median tends to be smoother, while medoid retains 
// single date of observation across all bands
// Specify compositing method (median or medoid)
var compositingMethod = 'medoid';

// 8. Choose Top of Atmospheric (TOA) or Surface Reflectance (SR) 
// Specify TOA or SR
var toaOrSR = 'SR';

// 9. Choose whether to include Landat 7
// Generally only included when data are limited
var includeSLCOffL7 = false;

// 10. Choose cloud/cloud shadow masking method
// Choices are fmask, cloudScoreTDOM, or hybrid to run cloudScore, fmask cloud 
// mask, TDOM, and then fmask cloud shadow 
//var cloudcloudShadowMaskingMethod = 'cloudScoreTDOM';

// 11. Cloud and cloud shadow masking parameters.
// If cloudScoreTDOM is chosen
// cloudScoreThresh: If using the cloudScoreTDOMShift method-Threshold for cloud 
//    masking (lower number masks more clouds.  Between 10 and 30 generally 
//    works best)
var cloudScoreThresh = 20;

// Percentile of cloud score to pull from time series to represent a minimum for 
// the cloud score over time for a given pixel. Reduces comission errors over 
// cool bright surfaces. Generally between 5 and 10 works well. 0 generally is a
// bit noisy
var cloudScorePctl = 5; 

// zScoreThresh: Threshold for cloud shadow masking- lower number masks out 
//    less. Between -0.8 and -1.2 generally works well
var zScoreThresh = -1;

// shadowSumThresh: Sum of IR bands to include as shadows within TDOM and the 
//    shadow shift method (lower number masks out less)
var shadowSumThresh = 0.35;

// contractPixels: The radius of the number of pixels to contract (negative 
//    buffer) clouds and cloud shadows by. Intended to eliminate smaller cloud 
//    patches that are likely errors
// (1.5 results in a -1 pixel buffer)(0.5 results in a -0 pixel buffer)
// (1.5 or 2.5 generally is sufficient)
var contractPixels = 0.5; 

// dilatePixels: The radius of the number of pixels to dilate (buffer) clouds 
//    and cloud shadows by. Intended to include edges of clouds/cloud shadows 
//    that are often missed
// (1.5 results in a 1 pixel buffer)(0.5 results in a 0 pixel buffer)
// (2.5 or 3.5 generally is sufficient)
var dilatePixels = 0.5;
// Metadata tag
var versionNumber = 1;

//Choose index to be used in LT analysis
var index = 'NBR';

// xx4. Specify an annual buffer to include imagery from the same season 
// timeframe from the prior and following year. timeBuffer = 1 will result 
// in a 3 year moving window
var timebuffer = 0;

// xx5. Specify the weights to be used for the moving window created by timeBuffer
//For example- if timeBuffer is 1, that is a 3 year moving window
//If the center year is 2000, then the years are 1999,2000, and 2001
//In order to overweight the center year, you could specify the weights as
//[1,5,1] which would duplicate the center year 5 times and increase its weight for
//the compositing method
var weights = [1];

//xx9. Whether to defringe L5
//Landsat 5 data has fringes on the edges that can introduce anomalies into 
//the analysis.  This method removes them, but is somewhat computationally expensive
var defringeL5 = false;

// xx10. Choose cloud/cloud shadow masking method
// Choices are a series of booleans for cloudScore, TDOM, and elements of Fmask
//Fmask masking options will run fastest since they're precomputed
//CloudScore runs pretty quickly, but does look at the time series to find areas that 
//always have a high cloudScore to reduce comission errors- this takes some time
//and needs a longer time series (>5 years or so)
//TDOM also looks at the time series and will need a longer time series
var applyCloudScore = false;
var applyFmaskCloudMask = true;

var applyTDOM = false;
var applyFmaskCloudShadowMask = true;

var applyFmaskSnowMask = true;

//xxWhether to find if an area typically has a high cloudScore
//If an area is always cloudy, this will result in cloud masking omission
//For bright areas that may always have a high cloudScore
//but not actually be cloudy, this will result in a reduction of commission errors
//This procedure needs at least 5 years of data to work well
var performCloudScoreOffset = false;

// xx12. correctIllumination: Choose if you want to correct the illumination using
// Sun-Canopy-Sensor+C correction. Additionally, choose the scale at which the
// correction is calculated in meters.
var correctIllumination = false;
var correctScale = 250;//Choose a scale to reduce on- 250 generally works well

//xx13. Export params
//Whether to export composites
var exportComposites = false;


//xxCRS- must be provided.  
//Common crs codes: Web mercator is EPSG:4326, USGS Albers is EPSG:5070, 
//WGS84 UTM N hemisphere is EPSG:326+ zone number (zone 12 N would be EPSG:32612) and S hemisphere is EPSG:327+ zone number
var crs = 'EPSG:5070';

//Specify transform if scale is null and snapping to known grid is needed
var transform = null;//[30,0,-2361915.0,0,-30,3177735.0];

//Specify scale if transform is null
var scale = 30;
// End user parameters


//Define landtrendr params
var run_params = { 
  maxSegments:            6,
  spikeThreshold:         0.9,
  vertexCountOvershoot:   3,
  preventOneYearRecovery: true,
  recoveryThreshold:      0.25,
  pvalThreshold:          0.05,
  bestModelProportion:    0.75,
  minObservationsNeeded:  6
};

// define resampling method
var resampleMethod = 'bilinear';

//Threshold for visualizing change (change > changeThresh).Generally 1000-2000 works well.  Lower numbers map more change.
var changeThresh = 2000;////////////////////////////////////////////////////////////////////////////////


//whether to use Roy harmonization
var harmonizeOLI = true
/// END USER PARAMETERS ///

// Prep client-side region for exporting
var region = studyArea.bounds(1000).getInfo().coordinates[0];

// Prepare dates
if (startJulian > endJulian) {
  endJulian = endJulian + 365;
}
var startDate = ee.Date.fromYMD(startYear,1,1).advance(startJulian-1,'day');
var endDate = ee.Date.fromYMD(endYear,1,1).advance(endJulian-1,'day');
print('Start and end dates:', startDate, endDate);

toaOrSR = toaOrSR.toUpperCase();

////////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Function to export a provided image to an EE asset
function asyncExportToAssetWrapper(
  imageForExport,assetName,assetPath,pyramidingPolicy,roi,scale,crs){
  //Make sure image is clipped to roi in case it's a multi-part polygon
  //imageForExport = imageForExport.clip(roi);
  assetName = assetName.replace(/\s+/g,'-');//Get rid of any spaces
  
  //Asynchronous approach to gathering converting server-side vectors to 
  //client-side without locking the browser
  roi.evaluate(function(roiInfo){
    var roiType = roiInfo.type.toString();
    //If it is a Polygon geometry...
    if( roiType === 'Polygon'){
      roi.bounds(1000).evaluate(function(polygonInfo){
        var region = polygonInfo.coordinates[0];
        Export.image.toAsset(imageForExport, assetName, assetPath, 
        {'.default':pyramidingPolicy}, null, region, scale, crs, null, 1e13);
      });
    }
    //If it is a MultiPolygon gometry.....
    else if( roiType === 'MultiPolygon'){
      roi.bounds(1000).evaluate(function(multiPolygonInfo){
        var region = multiPolygonInfo.coordinates[0];
        Export.image.toAsset(imageForExport, assetName, assetPath, 
        {'.default':pyramidingPolicy}, null, region, scale, crs, null, 1e13);
      });
    }
    //If it is a FeatureCollection.....
    else if( roiType === 'FeatureCollection'){
      roi.geometry(1000).bounds(1000).evaluate(function(featureCollectionInfo){
        var region = featureCollectionInfo.coordinates[0];
        Export.image.toAsset(imageForExport, assetName, assetPath, 
        {'.default':pyramidingPolicy}, null, region, scale, crs, null, 1e13);
      });
    }
    //Alert user if not supported
    else(
    alert('Type of feature is "'+roiType+ '". This is not handled\nIf a ' + 
    'Feature, can manually cast to featureCollections by using: ' + 
    'ee.FeatureCollection([myFeature])')
    );
  });
}

/////////////////////////////////////////////////////////////////////////////////////////
//Landtrendr processing
//Written by Yang Zhiqiang
/****************** Post Processing **********************/
/** 
* Extract maximum 6 segment outputs
*/
var getLTSegments = function(ltresult) {
  
  var zeros = ee.Image(ee.Array([[0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0],
                              [0,0,0,0,0,0,0]]));
  var lbls = [['doy','raw','ftv'],['1','2','3','4','5','6','7']];
 
  var vmask = ltresult.arraySlice(0,3,4);

  var result = ltresult.arrayMask(vmask)
                      .arraySlice(0, 0, 3)
                      .addBands(zeros)
                      .toArray(1)
                      .arraySlice(1, 0, 7)
                      .arrayFlatten(lbls, '');
  
  var resultC = result.select(ee.List.sequence(7,20));
  var resultT = result.select(ee.List.sequence(0,6)).int16();
  resultC = resultC.multiply(10000).int16();
  result = resultT.addBands(resultC);
  return result;
};

////////////////////////////////////////////////////////////////////////////////
//Function to produce Landtrendr outputs
///////////////////////////////////////////////////////////////////////////////
function getLT(indexName, annualLandsat,nameEnd,run_params,outputRepository){
  var sign = indexName[1];
  indexName = indexName[0];
  var ts = annualLandsat.select(indexName);
  
  //Set up timeseries for respective index/band
  ts = ts.map(function(img){
    var out = img.multiply(sign);
    out = out.set('system:time_start',img.get('system:time_start'));
    return out;
  });
  
  run_params.timeSeries = ts;
  //Run Landtrendr
  //ee.Algorithms.TemporalSegmentation.LandTrendr(timeSeries, maxSegments, spikeThreshold, vertexCountOvershoot, 
  //preventOneYearRecovery, recoveryThreshold, pvalThreshold, bestModelProportion, minObservationsNeeded)
  var ltresult =ee.Algorithms.TemporalSegmentation.LandTrendr(run_params).select('LandTrendr');
  print (ltresult, 'is letresult')
  //Convert array into exportable object
  
  
  //Extract maximum 6 segment outputs
  var getLTSegs = function(ltresult){
    //skeleton for band to be added to image
    var zeros = ee.Image(ee.Array([[0,0,0,0,0,0,0],//year 
                                [0,0,0,0,0,0,0],//source value (raw)
                                [0,0,0,0,0,0,0]])); //fitted [to estimated segments] value (ftv)
                                
    var lbls = [['doy','raw','ftv'],['1','2','3','4','5','6','7']];
    
    //vertex mask
    // get the vertex - yes(1)/no(0) dimension, which is the 4th row (index row 3) along the 0 (row) axis 
    var vmask = ltresult.arraySlice(0,3,4); 
  
    var result = ltresult.arrayMask(vmask)  //mask out non-vertex years
                        .arraySlice(0, 0, 3) //get only first three rows of result (year, source val, fitted val)
                        .addBands(zeros)  //adds an 'empty' 'band'
                        .toArray(1) //Concatenates pixels from each band along axis 1 into a single array per pixel. 
                        //The result will be masked if any input bands are masked.
                        
                        .arraySlice(1, 0, 7) //slice array along 1 axis (i.e. here: get all 'columns' in each row )
                        .arrayFlatten(lbls, ''); //Converts a single band image of equal-shape multidimensional pixels to an image of 
                        //scalar pixels, with one band for each element of the array.
    
    var resultC = result.select(ee.List.sequence(7,20));
    var resultT = result.select(ee.List.sequence(0,6)).int16();
    resultC = resultC.multiply(10000).int16();
    result = resultT.addBands(resultC);
    return result;
  };
  var dist = getLTSegs(ltresult);
  
   
    //Break LT output apart for exporting
   var years = dist.select(ee.List.sequence(0,6));
   var raw = dist.select(ee.List.sequence(7,13));
   var ftv = dist.select(ee.List.sequence(14,20));
   print ('years',years);
   print ('ftv:', ftv);
   print ('dist', dist);
  return [years,ftv, dist];
}
//replace with: landtrendrWrapper(processedComposites,startYear,endYear,indexName,distDir,run_params,distParams,mmu)
/// returns: return [lt,distImg,fittedCollection,vertStack];
  


///////////////////////////////////////////////////////////////////////////////
//Function for parsing output from LT into useful change data
///////////////////////////////////////////////////////////////////////////////

function parseLTAsset(years,ftv,forestMask,changeThresh,indexName,startYear,endYear){
  if(startYear === undefined || startYear === null){startYear = 1985}
  if(endYear === undefined || endYear === null){endYear = 2016}

  //Apply forest mask 
  years = years.updateMask(forestMask);
  ftv = ftv.updateMask(forestMask);
  
  //Mask any anomalous year values
  years = years.where(years.lt(1984).or(years.gt(2018)),0);
 
  //Get the vertex count (at each pixel); returns an image
  var vertexCount = years.neq(0).reduce(ee.Reducer.sum());

  //Convert back to array
  ftv = ftv.toArray(); //fitted values 
  years = years.toArray();
  
  //Get the vertex years and mask the fitted and year values 
  var m = years.neq(0);
  years = years.arrayMask(m);
  ftv = ftv.arrayMask(m);
  
  //Slice off the left and right years
  var yearsLeft = years.arraySlice(0,0,-1);
  var yearsRight = years.arraySlice(0,1,null);
  
  //Do the same for the fitted values
  var ftvLeft = ftv.arraySlice(0,0,-1);
  var ftvRight = ftv.arraySlice(0,1,null);
  
  
  //Get the difference between years and fitted values
  var yDiff = yearsRight.subtract(yearsLeft); //duration
  var ftvDiff = ftvRight.subtract(ftvLeft); //magnitude; if negative: in recovery
  
  //Set up a name end
  var nameEnd = indexName + '_' + startYear.toString() + '_' + endYear.toString();
  
  //Sort the differences (in terms of magnitude of disturbance) 
  // LT assumes that increasing values represent disturbance 
  //so multiply by -1 so first items in array are those of highest disturbace (not highest recovery)
  var diffSort = ftvDiff.multiply(-1).arraySort(); 

  //Iterate across the top 3 mag. differences to find change
  var indexes = [0,1,2];
  var yearChanges = [];
  var yearChanges_magDist = [];
  
  
  //print ('vtex cnt', vertexCount);
  indexes.map(function(i){
    //only keep areas of image where i less than the # of vertices is >1
    var diffSortT = diffSort.updateMask(vertexCount.subtract(i).gt(1)); 
    
    //diffT = band populated w/ -1* value at the i position extracted from the input multidimensional pixel 
    var diffT = diffSortT.arrayGet(i).multiply(-1); 
    print ('diffT:', diffT);
    var isDiff = ftvDiff.eq(diffT); //
    var yearChangeT = yearsRight.arrayMask(isDiff).arrayReduce(ee.Reducer.first(),[0]).arrayFlatten([['year_'+nameEnd]]);
    print ('yr change t:', yearChangeT);
    //
    var isChangeT = diffT.gt(changeThresh).and(vertexCount.gt(2)).and(yearChangeT.gt(startYear)).and(yearChangeT.lt(endYear));
    yearChangeT = yearChangeT.updateMask(isChangeT);
    diffT = diffT.updateMask(isChangeT);

    yearChanges.push(yearChangeT);
    yearChanges_magDist.push(diffT);
  });
  
  //Convert to image collection
  yearChanges = ee.ImageCollection(yearChanges);
  yearChanges_magDist = ee.ImageCollection(yearChanges_magDist);
  return [yearChanges, yearChanges_magDist]; //origianlly: DOES NOT RETURN MAGNITUDE OR DURATION OF DISTURBANCE
  
}

////////////////////////////////////////////////////////////////////////////////
// END FUNCTIONS
////////////////////////////////////////////////////////////////////////////////

// Get Landsat image collection
var ls = getImagesLib.getProcessedLandsatScenes(studyArea,startYear,endYear,startJulian,endJulian,
  toaOrSR,includeSLCOffL7,defringeL5,applyCloudScore,applyFmaskCloudMask,applyTDOM,
  applyFmaskCloudShadowMask,applyFmaskSnowMask,
  cloudScoreThresh,performCloudScoreOffset,cloudScorePctl,
  zScoreThresh,shadowSumThresh,
  contractPixels,dilatePixels,resampleMethod,harmonizeOLI);
//make sure harmonize OLI retains qa band

/*add soil indices*/
ls = ls.map(function(img){return getImagesLib.addSoilIndices(img).float()});
print ('ls:', ls);
// Create composites for each year within startYear and endYear range
var ts = getImagesLib.compositeTimeSeries(ls, startYear,endYear,startJulian,endJulian,timebuffer,weights,compositingMethod);
//Set up mask for values that are included in LT analysis
//Currently is the max NDVI in the time series of composites has to be gt 0.6
var mask = ee.ImageCollection(ts).select(['NDVI']).reduce(ee.Reducer.percentile([100])).gt(0.6);

// select band chosen as index for LandTrendr disturbance 
ts = ee.ImageCollection(ts).select([index]);
print ('ts:', ts.first());

//Run LT
var results = getLT([index,-1],ts,'temp',run_params,exportPathRoot);
  
//Parse LT results
var years = results[0];
var ftv = results[1];
Map.addLayer(years, '', 'years');
Map.addLayer(ftv, '', 'ftv');
var LTA =parseLTAsset(years,ftv,mask,changeThresh,index,startYear,endYear);
var yearChanges = LTA[0]; //years of top 3 disturbances?
var yearChanges_magDist = LTA[1]; //magnitude of top 3 disturbances?

print ('yearchanges FIRST', yearChanges.first());
print ('yearChanges_magDist first', yearChanges_magDist.first());
Map.addLayer(yearChanges_magDist.first(), {palette:'blue, red, yellow'}, 'yearChanges_magDist');
//Map.addLayer(yearChanges.clip(studyArea), '', 'year changes');

//Bring in MTBS
var mtbs = ee.ImageCollection('users/ianhousman/MTBS/Collection');
  
function fireToYear(img){
  var yr = ee.Date(img.get('system:time_start')).get('year');
  return ee.Image.constant(yr).updateMask(img.gt(0).focal_max(1.5)).uint16().rename('firedate');
}
  
mtbs = mtbs.map(fireToYear);
//var conusChange = ee.ImageCollection('projects/glri-phase3/science-team-outputs/conus-lcms-2018');
//print (conusChange.first(), 'conus change');
//Map.addLayer(conusChange.first().clip(geometry),'','conus chagne');
// conusChange = conusChange.map(function(img){
//   var yr = ee.Date(img.get('system:time_start')).get('year');
//   var change = img.gt(30);
//   var conusChangeYr = ee.Image(yr).updateMask(change).rename(['change']).int16();
//   return img.mask(ee.Image(1)).addBands(conusChangeYr);
  
// }); 
// var lcms_conus = conusChange.select([1]);
  
// var changePIF = conusChange.select(0).max().lt(5);
// Map.addLayer(changePIF.updateMask(changePIF), {}, 'changePIFs');
  
// Get the earliest (min) and latest (max) fire and LT years
var firemin = mtbs.min();
print(firemin, 'is firemin');
var firemax = mtbs.max();
  
//Use LT Disturbance  //dont seem to be catching any of mtbs fires 
var yearChangeMin = yearChanges.min();
print ('year changes min', yearChangeMin);
var yearChangeMax = yearChanges.max();
var changeMin = ee.Image(9999).where(yearChangeMin.mask(),yearChangeMin);
var changeMax = ee.Image(0).where(yearChangeMax.mask(),yearChangeMax);
  
Map.addLayer(changeMin.updateMask(changeMin.neq(9999)),{min:1984,max:2014,palette:'red, blue'},'Earliest LT Disturb Year',true);
Map.addLayer(changeMax.updateMask(changeMax.neq(0)),{min:1984,max:2014, palette: 'green, orange'},'Latest LT Disturb Year',false);
  
//Use MTBS
changeMin = changeMin.where(firemin.mask(),firemin);
changeMax = changeMax.where(firemax.mask(),firemax);
Map.addLayer(changeMin.updateMask(changeMin.neq(9999)),{min:1984,max:2014,palette:'red, blue'},'Earliest MTBS or LT Disturb Year',false);
Map.addLayer(changeMax.updateMask(changeMax.neq(0)),{min:1984,max:2014},'Latest MTBS or LT Disturb Year',false);
  
  
// Update images so that year is prior to earliest mtbs/LT disturbance
// or year is >= 30 years after latest disturbance
var lsT = ls.map(function(img){
  var yr = ee.Date(img.get('system:time_start')).get('year');
  yr = ee.Image.constant(yr);
  // img = img.updateMask(yr.lt(firedate));
  img = img.updateMask(yr.lt(changeMin).or(yr.gte(changeMax.add(30))));
  return img;
});
  
  ///////////////////////////////////////////////////////////////////////////////
  // STEP 5: Prepare composite for export
  // Get min bands
  ///////////////////////////////////////////////////////////////////////////////
var minBands = ee.List([
  'blue','green','red','nir','swir1','swir2', 'NDVI', 'NBR', 'BSI', 'HI', 'NDII', 'NDFI', 
  'NDCI', 'brightness', 'greenness', 'wetness', 'fourth', 'fifth', 'sixth']);
//var medoidBands = ee.List([
//'blue','green','red','nir','swir1','swir2', 'NDVI', 'NBR', 'BSI', 'HI', 'NDII', 'NDFI', 'NDCI', 
//  'brightness', 'greenness', 'wetness', 'fourth', 'fifth', 'sixth']);
var composite;
var composite_pre;
  
if(compositingMethod.toLowerCase() === 'median'){
  composite = lsT.select(minBands).median();
  composite_pre = ls.select(minBands).median();
}
else{
  composite = getImagesLib.medoidMosaicMSD(lsT.select(minBands),minBands);
  composite_pre = getImagesLib.medoidMosaicMSD(ls.select(minBands),minBands);
}
  
///////////////////////////////////////////////////////////////////////////////
// STEP 7: Reformat data for export. 
///////////////////////////////////////////////////////////////////////////////
var composite = composite.multiply(10000).int16(); 
  
var outImg = composite.clip(studyArea);
//outImg = getImagesLib.setNoData(outImg, -9999);

///////////////////////////////////////////////////////////////////////////////
// STEP 7: Export the composite. 
///////////////////////////////////////////////////////////////////////////////
// set up export name and path
var exportName = 'Landsat_' + toaOrSR.toUpperCase() + '_' + startYear + '_' + endYear +'_' + startJulian + '_' + endJulian + '_lcmsCONUS_mtbs';
var exportPath = exportPathRoot + '/' + exportName;
print('Export Image', outImg, exportPath);
print('Export composite', composite);

  
asyncExportToAssetWrapper(outImg,exportName,exportPath,'mean',studyArea,scale,crs);

Map.addLayer(composite, {}, 'output Image');
// ////////////////////////////////////////////////////////////////////////////////
// // Load the study region, with a blue outline.
// // Create an empty image into which to paint the features, cast to byte.
// // Paint all the polygon edges with the same number and width, display.
// var empty = ee.Image().byte();
// var outline = empty.paint({
//   featureCollection: studyArea,
//   color: 1,
//   width: 3
// });
// Map.addLayer(outline, {palette: '0000FF'}, "Study Area", false);
