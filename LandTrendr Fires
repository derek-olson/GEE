/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var medoidCollection = ee.ImageCollection("projects/USFS/LCMS-NFS/R4/Composites/R4-Composite-Collection"),
    R4 = ee.FeatureCollection("users/thinkbetween/R4_AdminBound");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
////////////////////////////////////////////////////////////////////////////////////////////////
// Import necessary libraries
////////////////////////////////////////////////////////////////////////////////////////////////

// Import the GTAC get image library - this will be used to join image collections
var getImageLib = require('users/USFS_GTAC/modules:getImagesLib.js');

////////////////////////////////////////////////////////////////////////////////////////////////
// Prepare the image composites for LandTrendr
////////////////////////////////////////////////////////////////////////////////////////////////

// define the sign of spectral delta for vegetation loss for the segmentation index - 
// NBR delta is negetive for vegetation loss, so -1 for NBR, 1 for band 5, -1 for NDVI, etc
var dist_dir = -1;

//Bands or indexs used to fit LANDTRENDR
//Can include: 'blue','green','red','nir','swir1','swir2'
//'NBR','NDVI','wetness','greenness','brightness','tcAngleBG'
var indexName = 'nbr';

// Generate medoid-based collection
var medoidIndex = medoidCollection.map(normalizedDifference)
                  .select(indexName)
                  .map(function(img){
                    var t = ee.Date(img.get('system:time_start'));
                    img = img.multiply(dist_dir);
                    return img.set('system:time_start',ee.Date.fromYMD(t.get('year'),6,1).millis());
                  });


////////////////////////////////////////////////////////////////////////////////////////////////
// User parameters to set
////////////////////////////////////////////////////////////////////////////////////////////////

// Indicate the province name - now set to export for all of Cambodia

//var studyArea = buildArea();
var studyArea = R4.geometry().bounds();

// Location for Google Drive exports
var exportDriveFolder =  'DriveFolderHere';

// Location for Asset exports, can be '' if exporting to root of your assets. 
var exportCollection =  'stand_age_data';

//Indicate the start and end years of the annual composites
var start_year = 1984;
var end_year = 2018;

//Define landtrendr parameters
var run_params = {
  maxSegments:            6,
  spikeThreshold:         0.9,
  vertexCountOvershoot:   3,
  preventOneYearRecovery: true,
  recoveryThreshold:      0.25,
  pvalThreshold:          0.05,
  bestModelProportion:    0.75,
  minObservationsNeeded:  6
};

////////////////////////////////////////////////////////////////////////////////////////////////
// Run LandTrendr
////////////////////////////////////////////////////////////////////////////////////////////////

//Append the NBR collection to the landtrendr paramters
run_params.timeSeries = medoidIndex; 

//Run LandTrendr and add the results to the map
var lt_result = ee.Algorithms.TemporalSegmentation.LandTrendr(run_params);
Map.addLayer(lt_result, {}, 'lt result', false);

// work with the outputs
var lt_array = lt_result.select([0]);
var lt_year = lt_array.arraySlice(0,0,1).arrayProject([1]);
var lt_fitted = lt_array.arraySlice(0,2,3).arrayProject([1]);

// create an index collection that is not inverted
var medoidJoinIndex = medoidCollection.map(normalizedDifference)
                  .select(indexName)
                  .map(function(img){
                    var t = ee.Date(img.get('system:time_start'));
                    return img.set('system:time_start',ee.Date.fromYMD(t.get('year'),6,1).millis());
                  });
                  
//Join the fitted values to the raw values and add it to the map
var fittedCollection = arrayToTimeSeries(lt_fitted.multiply(-1),lt_year,ee.List.sequence(start_year,end_year),'LT_Fitted_NBR');
var jc = getImageLib.joinCollections(medoidJoinIndex, ee.ImageCollection(fittedCollection), false);
Map.addLayer(jc, {}, 'joined collection', false);
// slice out the vertices
var vertex_mask = lt_array.arraySlice(0,3,4);
// mask out all values that do not correspond to a vertex
var vertices = lt_array.arrayMask(vertex_mask);

// break the array into a left and right side to get to from years for  calculating duration and magnitude
var left = vertices.arraySlice(1,0,-1);
var right = vertices.arraySlice(1,1,null);

var startYear = left.arraySlice(0, 0, 1);                       // get year dimension of LT data from the segment start vertices
var startVal = left.arraySlice(0, 2, 3).multiply(dist_dir);     // get spectral index dimension of LT data from the segment start vertices
var endYear = right.arraySlice(0, 0, 1);                        // get year dimension of LT data from the segment end vertices 
var endVal = right.arraySlice(0, 2, 3).multiply(dist_dir);      // get spectral index dimension of LT data from the segment end vertices 

var dur = endYear.subtract(startYear);       // subtract the segment start year from the segment end year to calculate the duration of segments 
var mag = endVal.subtract(startVal);         // substract the segment start index value from the segment end index value to calculate the delta of segments
var rate = mag.divide(dur);                  // calculate the rate of spectral change

// make an array that contains all the segment attributes
var segInfo = ee.Image.cat([startYear.add(1), endYear, startVal, endVal, mag, dur, rate]).unmask(ee.Image(ee.Array([[-9999]]))).toArray(0).mask(vertex_mask.mask());
//Map.addLayer(segInfo, {}, 'segment info', false);

// filter by magnitude
var mag_size = -0.2;
var mag_mask = segInfo.arraySlice(0,4,5).lte(mag_size);
var segInfoMasked = segInfo.toArray(0).arrayMask(mag_mask);
//Map.addLayer(segInfoMasked, {}, 'segment info masked', false);

// filter by duration 
var dur_max = 3;
var dur_mask = segInfoMasked.arraySlice(0,5,6).lt(dur_max);
var segInfoMaskedDur = segInfoMasked.toArray(0).arrayMask(dur_mask);

//get the most recent year of disturbance that met the magnitude threshold
//var yod = segInfoMasked.arraySlice(0,1,2).arrayProject([1]).arrayReduce(ee.Reducer.max(),[0]).arrayFlatten([['yod']]);
//Map.addLayer(yod.updateMask(yod.neq(0)), {min:1984, max:2018, palette:['#9400D3', '#4B0082', '#0000FF', '#00FF00', '#FFFF00', '#FF7F00', '#FF0000']}, 'year of most recent disturbance');

//get the most recent year of disturbance that met the magnitude threshold
var yod = segInfoMaskedDur.arraySlice(0,1,2).arrayProject([1]).arrayReduce(ee.Reducer.max(),[0]).arrayFlatten([['yod']]);
Map.addLayer(yod.updateMask(yod.neq(0)), {min:1984, max:2018, palette:['#9400D3', '#4B0082', '#0000FF', '#00FF00', '#FFFF00', '#FF7F00', '#FF0000']}, 'year of most recent disturbance');
////////////////////////////////////////////////////////////////////////////////////////////
//Function to convert an image array object to collection
////////////////////////////////////////////////////////////////////////////////////////////
function arrayToTimeSeries(tsArray,yearsArray,possibleYears,bandName){
    //Set up dummy image for handling null values
    var noDateValue = -32768;
    var dummyImage = ee.Image(noDateValue).toArray();
    
    //Ierate across years
    var tsC = possibleYears.map(function(yr){
      yr = ee.Number(yr);
      
      //Pull out given year
      var yrMask = yearsArray.eq(yr);
    
      //Mask array for that given year
      var masked = tsArray.arrayMask(yrMask);
      
      
      //Find null pixels
      var l = masked.arrayLength(0);
      
      //Fill null values and convert to regular image
      masked = masked.where(l.eq(0),dummyImage).arrayGet([-1]);
      
      //Remask nulls
      masked = masked.updateMask(masked.neq(noDateValue)).rename([bandName])      
        .set('system:time_start',ee.Date.fromYMD(yr,6,1).millis());
        
      return masked;
    
    
  });
  return ee.ImageCollection(tsC);
  }
  
//Construct study area, add to map, zoom.
function buildArea(){
  var sA = provinces.filter(ee.Filter.eq("NAME_1", provinceName));
  Map.addLayer(sA,{},"Study Area");
  Map.centerObject(sA, 8);
  return sA;
}

// function to add normalized difference to collection
function normalizedDifference(img){
  img = img.addBands(img.normalizedDifference(['nir', 'red']).rename('ndvi'));
  img = img.addBands(img.normalizedDifference(['nir', 'swir2']).rename('nbr'));
  img = img.addBands(img.normalizedDifference(['green', 'swir1']).rename('ndii'));
  img = img.addBands(img.normalizedDifference(['nir', 'swir1']).rename('ndwi2'));
  return img;
}