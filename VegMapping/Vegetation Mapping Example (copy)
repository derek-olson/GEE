/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var topoAll = ee.Image("users/thinkbetween/Dixie_topo"),
    harmonics_full = ee.Image("users/thinkbetween/Dixie_Harmonics"),
    landsatComposite = ee.Image("users/thinkbetween/Dixie_Composite"),
    climPCA = ee.Image("users/thinkbetween/Dixie_Climate_PCA"),
    ref1 = ee.FeatureCollection("users/thinkbetween/Dixie_Field_Ref_Data_Final_2015_10_30"),
    ref = ee.FeatureCollection("users/thinkbetween/Reference_Data");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Add the mapping boundary
var bound = ee.FeatureCollection('ft:166J6dwWluxbb3g15e3k2hhiRvUkyd6lXUO4NPzdV');
Map.addLayer(bound, {}, 'boundary');

//Set up the data
var climate = climPCA.clip(bound).select([0]).multiply(10000).int16();
var topo = topoAll.clip(bound);
var landsat = landsatComposite.clip(bound).select([0,1,2,3,4,5,6,11,12,13]);
var harmonics = harmonics_full.clip(bound);

//Create composite
var composite = topo.addBands(landsat).addBands(harmonics);
print('composite:', composite);

//Add the composite image to the map
Map.addLayer(composite, {}, 'composite', false);

//Get a list of the predictor bands
var bandList = composite.bandNames().getInfo();//.length()
//bandList = ee.List.sequence(1,bandList).getInfo()
//print('band list:', bandList)

//rescale the composite for segmentation
var scaledImageList = bandList.map(function(band){
  //Get each band
  var inBand = composite.select(band);
  
  //Find the min value
  var min = inBand.reduceRegion({
    reducer: ee.Reducer.min(),
    geometry: composite.geometry(),
    scale: 30,
    maxPixels: 1e13
  });
  min = min.get(band);
  //print('min:', min);
  
  //Create a constant raster with the min value
  var minBand = ee.Image.constant(min);
  //print('minBand:', minBand)
  //Find the max value
  var max = inBand.reduceRegion({
    reducer: ee.Reducer.max(),
    geometry: composite.geometry(),
    scale: 30,
    maxPixels: 1e13
  });
  max = max.get(band);
  //print('max:', max);
  
  //Create a constant raster with the max value
  var maxBand = ee.Image.constant(max);
  //print('maxBand:', maxBand)
  var scaledBands = inBand.subtract(minBand);
  scaledBands = scaledBands.divide(maxBand.subtract(minBand));
  
  return scaledBands;
});
//print('scaledImageList:', scaledImageList);

//Get the list of images to a single multiband image
var scaledImage = ee.ImageCollection(scaledImageList);
scaledImage = newCollectionToImage(scaledImage);
print('scaledImage:', scaledImage);

////////////////////////////////////////////////////////////////////////////////
// Helper function to convert image collection into stack of image bands
function newCollectionToImage(collection){
  var stack = ee.Image(collection.iterate(function(img, prev) {
    return ee.Image(prev).addBands(img);
  }, ee.Image(1)));

  stack = stack.select(ee.List.sequence(1, stack.bandNames().size().subtract(1)));
  return stack;
}
////////////////////////////////////////////////////////////////////////////////

//Add the composite image to the map
Map.addLayer(scaledImage, {}, 'scaledImage', false);

//Remap reference data
var refPoints = ref.remap(['WA','veg'], [0,1], 'L1');
print('refPoints:', refPoints);

//Add refereence data to the map
Map.addLayer(refPoints, {}, 'referenceData', false);

//Run SNIC on the regular square grid
var snic = ee.Algorithms.Image.Segmentation.SNIC({
  image: scaledImage, 
  size: 25,
  compactness: 20,
  connectivity: 8,
  neighborhoodSize:250,
  seeds: null
});
//print('snic:', snic);

//Add the segments to the map
var crs = 'EPSG:26912';
var scale = 30;
var clusters = snic.select("clusters").reproject(crs, null, scale);
print('clusters:', clusters);
Map.addLayer(clusters.randomVisualizer(), {}, "clusters", false);

//Compute per-cluster stdDev
var stdDev = composite.addBands(clusters).reduceConnectedComponents(ee.Reducer.stdDev(), "clusters", 256);
//print('stdDev:', stdDev)
Map.addLayer(stdDev, {min:0, max:0.1}, "StdDev", false);

//Randomly split the data into 60% for training, and 40% for testing
/*trainingTesting = trainingTesting.randomColumn('random',484789);
var training = trainingTesting
  .filter(ee.Filter.lt('random', 0.6));
var testing = trainingTesting
  .filter(ee.Filter.gte('random', 0.6));*/

//Create training data
var training = composite.sampleRegions({
  collection: refPoints, 
  properties: ['L1'], 
  scale:30, 
  projection: null, 
  tileScale: 1});
  
print('training:', training);

//Create randomForest classifier  
var rf = ee.Classifier.randomForest({
  numberOfTrees: 1000,
  variablesPerSplit: 0,
  minLeafPopulation: 1, 
  bagFraction: 0, 
  outOfBagMode: false,
  seed: 0
  })
  .train({
    features: training,
    classProperty:'L1',
    inputProperties: bandList, 
    subsampling: 1,
    subsamplingSeed: 0
  })
  .confusionMatrix();

//Predict across the composite  
var prediction = composite.classify(rf, 'randomForestClassificatiion');
print('prediction:', prediction);