/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var topoAll = ee.Image("users/thinkbetween/Dixie_topo"),
    harmonics_full = ee.Image("users/thinkbetween/Dixie_Harmonics"),
    landsatComposite = ee.Image("users/thinkbetween/Dixie_Composite"),
    climPCA = ee.Image("users/thinkbetween/Dixie_Climate_PCA");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Add the mapping boundary
var bound = ee.FeatureCollection('ft:166J6dwWluxbb3g15e3k2hhiRvUkyd6lXUO4NPzdV');
Map.addLayer(bound, {}, 'boundary');

//Set up the data
var climate = climPCA.clip(bound).select([0]).multiply(10000).int16();
var topo = topoAll.clip(bound);
var landsat = landsatComposite.clip(bound).select([0,1,2,3,4,5,6,11,12,13]);
var harmonics = harmonics_full.clip(bound);

//Create composite
var composite = topo.addBands(landsat).addBands(harmonics);
print('composite:', composite);

//Add the composite image to the map
Map.addLayer(composite, {}, 'composite', false);

//Load reference data
var ref = ee.FeatureCollection('ft:1icfdEpQQ6rSYk2G63bAkueANuiX6fmQ_7OqKTaqD');
print('ref:', ref);

//Add refereence data to the map
Map.addLayer(ref, {}, 'referenceData', false);

var bandList = composite.bandNames()//.length()
//bandList = ee.List.sequence(1,bandList).getInfo()
//print('band list:', bandList)


/*var outZonalStats = bandList.map(function(band){
  var tempComposite = segSNICComposite.select([0, band]);
  //print('tempComposite:', tempComposite);
  var zstats = tempComposite.reduceRegion({
    reducer: ee.Reducer.mean().unweighted().group({groupField:0, groupName:'clusters'}),
    scale: 30,
  geometry:segSNICComposite.geometry(),
  maxPixels: 1e13
  });

  return zstats;

});
print('zonal stats:', outZonalStats)*/

// Run SNIC on the regular square grid.
var snic = ee.Algorithms.Image.Segmentation.SNIC({
  image: composite, 
  size: 5,
  compactness: 20,
  connectivity: 8,
  neighborhoodSize:250,
  seeds: null
});
print('snic:', snic);

var clusters = snic.select("clusters")
Map.addLayer(clusters.randomVisualizer(), {}, "clusters")

// Compute per-cluster stdDev.
var stdDev = composite.addBands(clusters).reduceConnectedComponents(ee.Reducer.stdDev(), "clusters", 256)
print('stdDev:', stdDev)
Map.addLayer(stdDev, {min:0, max:0.1}, "StdDev", false)


// Build and train a classifer using the seed points.
/*var points2 = snic.select(bands).addBands(cdl2016).updateMask(seeds).sample(geometry, 5)
var classifier2 = ee.Classifier.randomForest(10).train(points2, "cropland")
Map.addLayer(snic.classify(classifier2), {min:0, max:254, palette: palette}, "Classified clusters", false)
Map.addLayer(expandSeeds(seeds), {palette: "white"}, "seeds")*/


//Randomly split the data into 60% for training, and 40% for testing
/*trainingTesting = trainingTesting.randomColumn('random',484789);
var training = trainingTesting
  .filter(ee.Filter.lt('random', 0.6));
var testing = trainingTesting
  .filter(ee.Filter.gte('random', 0.6));*/

var training = composite.sampleRegions({
  collection: ref, 
  properties: ee.List(['L1']), 
  scale:30, 
  projection: null, 
  tileScale: 1});
  
print('training:', training)

//Create randomForest classifier  
var rf = ee.Classifier.randomForest({
  numberOfTrees: 1000,
  variablesPerSplit: 0,
  minLeafPopulation: 1, 
  bagFraction: 0, 
  outOfBagMode: false,
  seed: 0
  })
  .setOutputMode('CLASSIFICATION')
  .train({
    features: training,
    classProperty:'L1',
    inputProperties: bandList, 
    subsampling: 1,
    subsamplingSeed: 0
  })
  .confusionMatrix();
  
var prediction = composite.classify(rf, 'randomForestClassificatiion');
print('prediction:', prediction)