/*/////////////////////////////////////////////////////////////////////////////
SERVIR-MEKONG 2016
SCRIPT: ExportComposite
CONTACT INFORMATION: Karis Tenneson, rsac_gee@fs.fed.us
Date: 18-Oct-2016

SNIPPETS USED:
-getCloudFreeImages
-addIndices
-getTasseledCap
-exportAsset


LINK TO REPORT(S):
DESCRIPTION:
This script accomplishes several tasks:
 1) Loads Mekong study region 
 2) Gathers Landsat 4,5,7,8 imagery
 3) Masks shadows and clouds 
 4) Adds common spectral indices and tasseled cap
 5) Splits collection by year and exports composite to asset
*//////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
//FUNCTIONS
///////////////////////////////////////////////////////////////////////////////
//Function for acquiring Landsat TOA image collection
function getImageCollection(studyArea,startDate,endDate,startJulian,endJulian){
  var ls;var l4TOAs;var l5TOAs;var l7TOAs;var l8TOAs;var out;
  
  var sensorBandDictLandsatTOA =ee.Dictionary({L8 : ee.List([1,2,3,4,5,9,6]),
                        L7 : ee.List([0,1,2,3,4,5,7]),
                        L5 : ee.List([0,1,2,3,4,5,6]),
                        L4 : ee.List([0,1,2,3,4,5,6])
  });
  var bandNamesLandsatTOA = ee.List(['blue','green','red','nir','swir1','temp',
      'swir2']);

  l4TOAs = ee.ImageCollection('LANDSAT/LT4_L1T_TOA')
      .filterDate(startDate,endDate)
      .filter(ee.Filter.calendarRange(startJulian,endJulian))
      .filterBounds(studyArea)
      .filterMetadata('CLOUD_COVER','less_than',metadataCloudCoverMax)
      .select(sensorBandDictLandsatTOA.get('L4'),bandNamesLandsatTOA);
  
  l5TOAs = ee.ImageCollection('LANDSAT/LT5_L1T_TOA')
      .filterDate(startDate,endDate)
      .filter(ee.Filter.calendarRange(startJulian,endJulian))
      .filterBounds(studyArea)
      .filterMetadata('CLOUD_COVER','less_than',metadataCloudCoverMax)
      .select(sensorBandDictLandsatTOA.get('L5'),bandNamesLandsatTOA);
  
  l8TOAs = ee.ImageCollection('LANDSAT/LC8_L1T_TOA')
      .filterDate(startDate,endDate)
      .filter(ee.Filter.calendarRange(startJulian,endJulian))
      .filterBounds(studyArea)
      .filterMetadata('CLOUD_COVER','less_than',metadataCloudCoverMax)
      .select(sensorBandDictLandsatTOA.get('L8'),bandNamesLandsatTOA);

  l7TOAs = ee.ImageCollection('LANDSAT/LE7_L1T_TOA')
      .filterDate(startDate,endDate)
      .filter(ee.Filter.calendarRange(startJulian,endJulian))
      .filterBounds(studyArea)
      .filterMetadata('CLOUD_COVER','less_than',metadataCloudCoverMax)
      .select(sensorBandDictLandsatTOA.get('L7'),bandNamesLandsatTOA);
  
  ls = ee.ImageCollection(l4TOAs.merge(l5TOAs).merge(l7TOAs).merge(l8TOAs));
  out = ls;
  return out;
}


///////////////////////////////////////////////////////////////////////////////
// A helper to apply an expression and linearly rescale the output.
// Used in the landsatCloudScore function below.
var rescale = function(img, exp, thresholds) {
  return img.expression(exp, {img: img})
      .subtract(thresholds[0]).divide(thresholds[1] - thresholds[0]);
};

///////////////////////////////////////////////////////////////////////////////
// Compute a cloud score and adds a band that represents the cloud mask.  
// This expects the input image to have the common band names: 
// ["red", "blue", etc], so it can work across sensors.
function landsatCloudScore(img) {
  // Compute several indicators of cloudiness and take the minimum of them.
  var score = ee.Image(1.0);
  // Clouds are reasonably bright in the blue band.
  score = score.min(rescale(img, 'img.blue', [0.1, 0.3]));
 
  // Clouds are reasonably bright in all visible bands.
  score = score.min(rescale(img, 'img.red + img.green + img.blue', [0.2, 0.8]));
   
  // Clouds are reasonably bright in all infrared bands.
  score = score.min(
      rescale(img, 'img.nir + img.swir1 + img.swir2', [0.3, 0.8]));

  // Clouds are reasonably cool in temperature.
  score = score.min(rescale(img,'img.temp', [300, 290]));

  // However, clouds are not snow.
  var ndsi = img.normalizedDifference(['green', 'swir1']);
  score =  score.min(rescale(ndsi, 'img', [0.8, 0.6])).multiply(100).byte();
  score = score.lt(cloudThresh).rename('cloudMask');
  img = img.updateMask(score);
  return img.addBands(score);
}

///////////////////////////////////////////////////////////////////////////////
//Function for finding dark outliers in time series.
//Original concept written by Carson Stam and adapted by Ian Housman.
//Adds a band that is a mask of pixels that are dark, and dark outliers.
function simpleTDOM2(collection,zScoreThresh,shadowSumThresh,dilatePixels){
  var shadowSumBands = ['nir','swir1'];
  
  //Get some pixel-wise stats for the time series
  var irStdDev = collection.select(shadowSumBands).reduce(ee.Reducer.stdDev());
  var irMean = collection.select(shadowSumBands).mean();
  
  //Mask out dark dark outliers
  collection = collection.map(function(img){
    var zScore = img.select(shadowSumBands).subtract(irMean).divide(irStdDev);
    var irSum = img.select(shadowSumBands).reduce(ee.Reducer.sum());
    var TDOMMask = zScore.lt(zScoreThresh).reduce(ee.Reducer.sum()).eq(2)
        .and(irSum.lt(shadowSumThresh)).not();
    TDOMMask = TDOMMask.focal_min(dilatePixels);
    return img.addBands(TDOMMask.rename('TDOMMask'));
  });
  
  return collection;
}

///////////////////////////////////////////////////////////////////////////////
//Function for wrapping cloud and shadow masking together.
//Assumes image has cloud mask band called "cloudMask" and a TDOM mask called 
//"TDOMMask".
function cloudProject(img,shadowSumThresh,dilatePixels,cloudHeights){
  
  //Get the cloud mask
  var cloud = img.select('cloudMask').not();
  cloud = cloud.focal_max(dilatePixels);
  cloud = cloud.updateMask(cloud);
  
  //Get TDOM mask
  var TDOMMask = img.select(['TDOMMask']).not();
  
  //Project the shadow finding pixels inside the TDOM mask that are dark and 
  //inside the expected area given the solar geometry
  //Find dark pixels
  var darkPixels = img.select(['nir','swir1','swir2'])
      .reduce(ee.Reducer.sum()).lt(shadowSumThresh);//.gte(1);
  
  //Get scale of image
  var nominalScale = cloud.projection().nominalScale();

  //Find where cloud shadows should be based on solar geometry
  //Convert to radians
  var meanAzimuth = img.get('SUN_AZIMUTH');
  var meanZenith = img.get('SUN_ELEVATION');
  var azR = ee.Number(meanAzimuth).multiply(Math.PI).divide(180.0)
      .add(ee.Number(0.5).multiply(Math.PI ));
  var zenR = ee.Number(0.5).multiply(Math.PI )
      .subtract(ee.Number(meanZenith).multiply(Math.PI).divide(180.0));
  
  //Find the shadows
  var shadows = cloudHeights.map(function(cloudHeight){
    cloudHeight = ee.Number(cloudHeight);
    var shadowCastedDistance = zenR.tan()
        .multiply(cloudHeight);//Distance shadow is cast
    var x = azR.cos().multiply(shadowCastedDistance)
        .divide(nominalScale).round();//X distance of shadow
    var y = azR.sin().multiply(shadowCastedDistance)
        .divide(nominalScale).round();//Y distance of shadow
    return cloud.changeProj(cloud.projection(), cloud.projection()
        .translate(x, y));
  });

  var shadow = ee.ImageCollection.fromImages(shadows).max();
 
  //Create shadow mask
  shadow = shadow.updateMask(cloud.mask().not());
  shadow = shadow.focal_max(dilatePixels);
  shadow = shadow.updateMask(darkPixels.and(TDOMMask));

  //Combine the cloud and shadow masks
  var combinedMask = cloud.mask().or(shadow.mask()).eq(0);
  
  //Update the image's mask and return the image
  img = img.updateMask(combinedMask);
  img = img.addBands(combinedMask.rename(['cloudShadowMask']));
  return img;
}

///////////////////////////////////////////////////////////////////////////////
//Function to add common spectral indices to an image:
function addIndices(img){
  // Add Normalized Difference Vegetation Index (NDVI)
  img = img.addBands(img.normalizedDifference(['nir','red']).rename('NDVI'));
  
  // Add Normalized Burn Ratio (NBR)
  img = img.addBands(img.normalizedDifference(['nir','swir2']).rename('NBR'));
  
  // Add Normalized Difference Built-Up Index (NDBI)
  img = img.addBands(img.normalizedDifference(['swir1','nir']).rename('NDBI'));
  
  // Add Normalized Difference Water Body Index (NDWBI)
  img = img.addBands(img.normalizedDifference(['green','nir']).rename('NDWBI'));
  
  // Add Normalized Difference Water Index (NDWI)
  // also known as Land Surface Water Index (LSWI)
  img = img.addBands(img.normalizedDifference(['nir','swir1']).rename('NDWI'));
  
  // Add Normalized Difference Snow Index (NDSI)
  img = img.addBands(img.normalizedDifference(['green','swir1']).rename('NDSI'));
  
  // Add Enhanced Vegetation Index (EVI)
  var evi = img.expression(
    '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
      'NIR': img.select('nir'),
      'RED': img.select('red'),
      'BLUE': img.select('blue')
  }).float();
  img = img.addBands(evi.rename('EVI'));
  
  // Add Soil Adjust Vegetation Index (SAVI)
  // using L = 0.5;
  var savi = img.expression(
    '(NIR - RED) * (1 + 0.5)/(NIR + RED + 0.5)', {
      'NIR': img.select('nir'),
      'RED': img.select('red')
  }).float();
  img = img.addBands(savi.rename('SAVI'));
  
  // Add Index-Based Built-Up Index (IBI)
  var ibi_a = img.expression(
    '2*SWIR1/(SWIR1 + NIR)', {
      'SWIR1': img.select('swir1'),
      'NIR': img.select('nir')
    }).rename('IBI_A');
  var ibi_b = img.expression(
    '(NIR/(NIR + RED)) + (GREEN/(GREEN + SWIR1))', {
      'NIR': img.select('nir'),
      'RED': img.select('red'),
      'GREEN': img.select('green'),
      'SWIR1': img.select('swir1')
    }).rename('IBI_B');
  ibi_a = ibi_a.addBands(ibi_b);
  var ibi = ibi_a.normalizedDifference(['IBI_A','IBI_B']);
  img = img.addBands(ibi.rename('IBI'));
  return img;
}

///////////////////////////////////////////////////////////////////////////////
// Function to compute the Tasseled Cap transformation and return an image
// with the following bands added: ['brightness', 'greenness', 'wetness', 
// 'fourth', 'fifth', 'sixth']
function getTasseledCap(image,bands) {
  // Kauth-Thomas coefficients for Thematic Mapper data
  var coefficients = ee.Array([
    [0.3037, 0.2793, 0.4743, 0.5585, 0.5082, 0.1863],
    [-0.2848, -0.2435, -0.5436, 0.7243, 0.0840, -0.1800],
    [0.1509, 0.1973, 0.3279, 0.3406, -0.7112, -0.4572],
    [-0.8242, 0.0849, 0.4392, -0.0580, 0.2012, -0.2768],
    [-0.3280, 0.0549, 0.1075, 0.1855, -0.4357, 0.8085],
    [0.1084, -0.9022, 0.4120, 0.0573, -0.0251, 0.0238]
  ]);
  // Make an Array Image, with a 1-D Array per pixel.
  var arrayImage1D = image.select(bands).toArray();
  
  // Make an Array Image with a 2-D Array per pixel, 6x1.
  var arrayImage2D = arrayImage1D.toArray(1);
  
  var componentsImage = ee.Image(coefficients)
    .matrixMultiply(arrayImage2D)
    // Get rid of the extra dimensions.
    .arrayProject([0])
    // Get a multi-band image with TC-named bands.
    .arrayFlatten(
      [['brightness', 'greenness', 'wetness', 'fourth', 'fifth', 'sixth']])
    .float();
  
  return image.addBands(componentsImage);
}

///////////////////////////////////////////////////////////////////////////////
// Function to export a provided image to an EE asset
function asyncExportToAssetWrapper(
  imageForExport,assetName,pyramidingPolicy,roi,scale,crs){
  //Make sure image is clipped to roi in case it's a multi-part polygon
  imageForExport = imageForExport.clip(roi);
  assetName = assetName.replace(/\s+/g,'-');//Get rid of any spaces
  
  //Asynchronous approach to gathering converting server-side vectors to 
  //client-side without locking the browser
  roi.evaluate(function(roiInfo){
    var roiType = roiInfo.type.toString();
    //If it is a Polygon geometry...
    if( roiType === 'Polygon'){
      roi.bounds(1000).evaluate(function(polygonInfo){
        var region = polygonInfo.coordinates[0];
        Export.image.toAsset(imageForExport, assetName, assetName, 
        {'.default':pyramidingPolicy}, null, region, scale, crs, null, 1e13);
      });
    }
    //If it is a MultiPolygon gometry.....
    else if( roiType === 'MultiPolygon'){
      roi.bounds(1000).evaluate(function(multiPolygonInfo){
        var region = multiPolygonInfo.coordinates[0];
        Export.image.toAsset(imageForExport, assetName, assetName, 
        {'.default':pyramidingPolicy}, null, region, scale, crs, null, 1e13);
      });
    }
    //If it is a FeatureCollection.....
    else if( roiType === 'FeatureCollection'){
      roi.geometry(1000).bounds(1000).evaluate(function(featureCollectionInfo){
        var region = featureCollectionInfo.coordinates[0];
        Export.image.toAsset(imageForExport, assetName, assetName, 
        {'.default':pyramidingPolicy}, null, region, scale, crs, null, 1e13);
      });
    }
    //Alert user if not supported
    else(
    alert('Type of feature is "'+roiType+ '". This is not handled\nIf a ' + 
    'Feature, can manually cast to featureCollections by using: ' + 
    'ee.FeatureCollection([myFeature])')
    );
  });
}

/*/////////////////////////////////////////////////////////////////////////////
SCRIPT: Exports Annual Median Composite of Mekong Region with Spectral Indices
///////////////////////////////////////////////////////////////////////////////
// STEP 0: Define user inputs:
studyArea: Study area

startYear: First year to include imagery from

endYear: Last year to include imagery from

startJulian: Starting Julian Date- Supports wrapping for tropics and 
    southern hemisphere
    
endJulian: Ending Julian date- Supports wrapping for tropics and 
    southern hemisphere
    
metadataCloudCoverMax: Cloud cover percentage in image metadata threshold.
    Will not include images with cloud cover > this number. Set to 100 if 
    using metadata cloud cover is not wanted
    
cloudThresh: If using the cloudScoreTDOMShift method-Threshold for cloud 
    masking (lower number masks more clouds.  Between 10 and 30 generally 
    works best)
    
dilatePixels: Number of pixels to buffer clouds and cloud 
    shadows by (1 or 2 generally is sufficient)
    
cloudHeights: Height of clouds to use to project cloud shadows

zScoreThresh: Threshold for cloud shadow masking- lower number masks out 
    less.  Between -0.8 and -1.2 generally works well
    
shadowSumThresh: Sum of IR bands to include as shadows within TDOM and the 
    shadow shift method (lower number masks out less)
    
vizParams: Options for map visualization
*/

var compositeYear = 2016;
var startYear = 2016;
var endYear = 2017;
var startJulian = 1;
var endJulian = 365;

var collectionName = 'MekongComposite_' + compositeYear;

var metadataCloudCoverMax = 100;
var cloudThresh = 20;
var dilatePixels = 2;
var cloudHeights = ee.List.sequence(200,5000,500);
var zScoreThresh = -0.8;
var shadowSumThresh = 0.35;
var vizParams = {'min': 0.05,'max': 0.5, 'bands':'swir1,nir,red', 
    'gamma':1.6};
var useCloudProject = true;

// Prepare dates
if(startJulian > endJulian){endJulian = endJulian + 365}
var startDate = ee.Date.fromYMD(startYear,1,1).advance(startJulian-1,'day');
var endDate = ee.Date.fromYMD(endYear,1,1).advance(endJulian-1,'day');
print('Start and end dates:',startDate,endDate);

// STEP 1: Load Mekong study region (Myanmar, Thailand, Laos, Vietnam, Cambodia)
var mekongBuffer = ee.FeatureCollection('ft:1LEGeqwlBCAlN61ie5ol24NdUDqB1MgpFR_sJNWQJ');
var mekongRegion = mekongBuffer.geometry();
// var testRegion = ee.Geometry.Rectangle(95.99853515625,19.550731588019225,
//     97.12326049804688,20.00690314683048);
var studyArea = mekongRegion;//testRegion;//
Map.addLayer(studyArea, null, "Lower Mekong Study Area",false);
Map.centerObject(studyArea, 6);

// STEP 2: Get Landsat 4,5,8,7 Image Collections
var ls = getImageCollection(studyArea,startDate,endDate,startJulian,endJulian);
//Map.addLayer(ls.median(),vizParams,'Landsat before masking composite',false);

// STEP 3: Compute a cloud score and mask clouds
ls = ls.map(landsatCloudScore);

// Find and mask out dark outliers
ls = simpleTDOM2(ls,zScoreThresh,shadowSumThresh,dilatePixels);

if (useCloudProject) {
  // Run cloud project to get the final cloud and shadow masked image collection
  ls = ls.map(function(img){return cloudProject(img,shadowSumThresh,dilatePixels,
       cloudHeights)});
} else {
  // Just apply the TDOM Mask
  ls = ls.map(function(img){return img.updateMask(img.select(['TDOMMask']))});
}

//Map.addLayer(ls.median(),vizParams,'Landsat Composite (All years)',false);

// STEP 4: Add common spectral indices and tasseled cap transformation
ls = ls.map(addIndices);
var tcInputBands = ee.List(['blue','green','red','nir','swir1','swir2']);
ls = ls.map(function(img){return getTasseledCap(img,tcInputBands)});

// STEP 5: Split collection by year and export composite to asset
var compositeBands = ee.List(['blue','green','red','nir','swir1','temp',
    'swir2','NDVI','NBR','NDBI','NDWBI','NDWI','NDSI','EVI','SAVI','IBI',
    'brightness','greenness','wetness','fourth', 'fifth', 'sixth']);
var composite = ls.select(compositeBands).median();

asyncExportToAssetWrapper(composite,collectionName,'mean',
  studyArea,30,'EPSG:4326');


/*
AUTHORS: Joshua Goldstein, Ian Housman, Karis Tenneson, GEE Team
Function contributors: Carson Stam, Matt Hancher, Gennadii Donchyts
*/